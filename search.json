[{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://bips-hb.github.io/CVN/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://bips-hb.github.io/CVN/articles/cvn-vignette.html","id":"covariate-varying-networks","dir":"Articles","previous_headings":"","what":"Covariate-Varying Networks","title":"Covariate-Varying Networks","text":"graphical model powerful tool exploring complex dependency structures high-throughput datasets, genomics, epigenomics, proteomics. allow investigation , e.g. biologically, meaningful patterns aid understanding biological processes generating new hypotheses. Despite widespread application Gaussian graphical models, urgent need connecting graph structures external covariates. CVN Gaussian graphical model high-dimensional data can change multiple external discrete covariates. combination categories covariates, graph estimated. done individually, since allow similarities different graphs related various covariates. smoothness graphs CVN model introduced meta-graph WW. meta-graph, node corresponds graph CVN model edge two graphs enforces smoothing graphs. formally, CVN represented graphical model quintupel CVN={𝐗,𝐔,𝒰,f(𝐗∣𝐔),{G(u)=(V,E(u))}u∈𝒰}, \\text{CVN} = \\{\\mathbf{X}, \\mathbf{U}, \\mathcal{U}, f(\\mathbf{X} \\mid \\mathbf{U}),  \\{G(u) = (V, E(u)) \\}_{u \\\\mathcal{U}} \\},  𝐗=(X1,X2…,Xp)⊤\\mathbf{X} = (X_1, X_2 \\ldots, X_p)^\\top pp-dimensional random vector 𝐔=(U1,U2,…,Uq)⊤\\mathbf{U} = (U_1, U_2, \\ldots, U_q)^\\top random vector representing qq external discrete covariates. external discrete covariates included graph, determine smoothing possible combinations covariates (K1,…,Kq)⊤(K_1,\\ldots, K_q)^\\top categories. vector 𝐔\\mathbf{U} lies discrete space 𝒰\\mathcal{U} cardinality m≤∏k=1qKkm \\leq \\prod_{k=1}^q K_k. joint density function 𝐗\\mathbf{X} conditioned 𝐔\\mathbf{U} f(𝐗∣𝐔)f(\\mathbf{X} \\mid \\mathbf{U}). fifth element CVN set mm graphs, one value uu 𝒰\\mathcal{U}. vertices G(u)G(u), V={1,2,…,p}V = \\{1, 2, \\ldots, p\\}, correspond variables X1,X2,…,XpX_1, X_2, \\ldots, X_p change 𝐔\\mathbf{U}. assume 𝐗∣𝐔\\mathbf{X} \\mid \\mathbf{U} follows multivariate normal distribution 𝛍(u)=0\\mathbf{\\mu}(u) = 0 covariance matrix 𝚺(u)\\mathbf{\\Sigma}(u). estimate structure graph, focus precision matrix 𝚯(u)=𝚺(u)−1\\mathbf{\\Theta}(u) = \\mathbf{\\Sigma}(u)^{-1} following property normality assumption: $$ \\theta_{ij}(u) = 0 \\Leftrightarrow X_i \\\\!\\perp\\!\\!\\!\\perp X_j \\mid \\mathbf{X}_{V \\setminus \\{,j\\}} \\land U = u   \\Leftrightarrow \\text{edge } \\{,j\\} \\notin E(u) $$ Hence, ()dependence structure CVN can estimated determining zero entries precision matrices. goal enable CVN handle high-dimensional data identify structural similarities graphs. therefore introduce regularization smoothness definition CVN estimator 𝚯CVN={𝚯̂}=1m\\mathbf{ \\Theta}_{\\text{CVN}} = \\{ \\widehat{\\mathbf{\\Theta}}_i \\}_{= 1}^m follows: 𝚯CVN=argmin{𝚯i}=1m[∑=1mℓ(𝚯i)+λ1∑=1m∥𝚯i∥1+λ2∑<jwij∥𝚯i−𝚯j∥1], \\mathbf{ \\Theta}_{\\text{CVN}} = \\text{argmin}_{\\{ \\mathbf{\\Theta}_{}\\}_{= 1}^m}      \\Bigg[ \\sum_{= 1}^m \\ell\\left({\\mathbf{\\Theta}_i}\\right)       + \\lambda_1 \\sum_{= 1}^m \\left\\rVert \\mathbf{\\Theta}_i \\right\\rVert_1       + \\lambda_2 \\sum_{< j} w_{ij} \\left\\lVert \\mathbf{\\Theta}_i - \\mathbf{\\Theta}_j \\right\\rVert_1 \\Bigg], 𝚯i\\mathbf{ \\Theta}_i ii-th precision matrix, ℓ(𝚯i)\\ell\\left({\\mathbf{\\Theta}_i}\\right) log-likelihood function precision matrix ii, wijw_{ij} values symmetric weighted adjacency matrix meta-graph (see ) λ1,λ2\\lambda_1, \\lambda_2 two tuning parameters.","code":""},{"path":"https://bips-hb.github.io/CVN/articles/cvn-vignette.html","id":"meta-graph-w","dir":"Articles","previous_headings":"Covariate-Varying Networks","what":"Meta-Graph WW","title":"Covariate-Varying Networks","text":"CVN model might differ graphical model approaches especially concept (undirected) meta-graph. adjacency matrix meta-graph equals weight matrix 𝐖=(wij)m×m\\mathbf{W} = (w_{ij})_{m \\times m}, m×mm \\times m symmetric matrix. encodes smoothing structure graphs CVN must set priori. weight 0 smooth structure two graphs. Weights must chosen 0 1. examples 𝐖\\mathbf{W} corresponding meta-graph CVN 2 covariates can look like:","code":""},{"path":"https://bips-hb.github.io/CVN/articles/cvn-vignette.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Covariate-Varying Networks","text":"fictitious example, interested independence structure collected biomarkers differ 2 external variables Body mass index (BMI) income level. biomarker values transformed normally distributed z-score values. BMI three categories underweight, normal weight, overweight, income level categories low, middle high.","code":""},{"path":"https://bips-hb.github.io/CVN/articles/cvn-vignette.html","id":"data","dir":"Articles","previous_headings":"Example","what":"Data","title":"Covariate-Varying Networks","text":"example, use randomly simulated data variables graph z-score values various biomarkers, following normal distribution. interested , graphs differ two external variables, K=L=3K = L = 3 categories. CVN function requires input data: list K⋅L=mK \\cdot L = m data sets list element needs matrix data object Gaussian data, corresponding combination categories two external variables number variables pp must equal list element, number observations may differ. input data list 3×3=93 \\times 3 = 9 list elements corresponding combinations (underweight - low income), (underweight - middle income), …, (overweight - high income).","code":"# Load required library library(CVN) library(dplyr)  # Simulate the dataset set.seed(2024)   n <- 300    # Create 10 normally distributed variables for the graph data <- as.data.frame(matrix(rnorm(n * 10), ncol = 10)) colnames(data) <- paste0(\"X\", 1:10)  # Add two discrete external covariates data$income <- sample(c(\"low\",\"middle\", \"high\"), n, replace = TRUE)   data$bmi <- sample(c(\"underweight\",\"normal weight\", \"overweight\"), n, replace = TRUE)  # Split the dataset into subsets based on dosis and bmi data_list <- data %>%   group_by(income, bmi) %>%   group_split() %>%   lapply(function(df) df %>% select(-income, -bmi))  names(data_list) <-    apply(expand.grid(income = c(\"low\",\"middle\", \"high\"),                      bmi = c(\"underweight\",\"normal weight\", \"overweight\")),          1,         function(x) paste0(x[1], \"_\", x[2]))"},{"path":"https://bips-hb.github.io/CVN/articles/cvn-vignette.html","id":"weigth-matrix-and-meta-graph","dir":"Articles","previous_headings":"Example","what":"Weigth Matrix and Meta-Graph","title":"Covariate-Varying Networks","text":"set meta-graph WW example following: case two external covariates, function create_weight_matrix might used generated simple weight matrices type full (equals saturated graphs), grid, glasso random structures using uniform-random. Weight matrices can plotted meta-graph heatmap plot: can done several ways: graph output can generated creating weight matrix using function create_weight_matrix setting parameter plot=TRUE, using plot_weight_matrix function (see ). heatmap plot generated using function hd_weight_matrix. first two options require igraph package. heatmap plot looks like following. Note dimension size m×mm \\times m. Axis labeling according order data_list containing mm data sets.","code":"# plots can be turned on by setting plot = TRUE. Requires the igraph package W_grid <- create_weight_matrix(type = \"grid\", k = 3, l = 3, plot = FALSE) # requires the igraph package plot_weight_matrix(W_random, k = 3, l = 2) W_random <- round(create_weight_matrix(type = \"uniform-random\", k = 3, l = 2), 2) hd_weight_matrix(W_random)  # randomly chosen weights"},{"path":"https://bips-hb.github.io/CVN/articles/cvn-vignette.html","id":"tuning-parameter-space","dir":"Articles","previous_headings":"","what":"Tuning Parameter Space","title":"Covariate-Varying Networks","text":"know methods, e.g., GLASSO, need tune model. CVN requires select two tuning parameters control regularization applied CVN. choice tuning parameters affects dense graphs much edges graphs smoothed. parameters usually searched predefined regularization path. λ1\\lambda_1 governs sparsity CVN, gets sparser larger λ1\\lambda_1 chosen. λ2\\lambda_2 responsible regulating smoothness similarity graphs penalizing differences precision matrices connected meta-graph. encourages similar values precision matrices hence also edge included graph . graphs CVN getting similar larger λ2\\lambda_2 selected. CVN function fits combinations given selection λ1\\lambda_1 λ2\\lambda_2 values.","code":"# Lets define a regularization path for each tuning parameter lambda1 = seq(0.5, 2, length = 3)  # sparsity lambda2 = c(1, 1.5)                # smoothing"},{"path":"https://bips-hb.github.io/CVN/articles/cvn-vignette.html","id":"estimate-a-cvn","dir":"Articles","previous_headings":"","what":"Estimate a CVN","title":"Covariate-Varying Networks","text":"CVN graphical model fitted using alternating direction method multipliers (ADMM). default, CVN function parallelize multiple values λ1\\lambda_1 λ2\\lambda_2 provided. However, number cores used can adjusted setting, e.g, n_cores = 1. CVN simply estimated following.","code":"cvn <- CVN(data = data_list,                W = W_grid,          lambda1 = lambda1,          lambda2 = lambda2,              eps = 1e-2,       # makes it faster but less precise; default = 1e-4         maxiter = 500,          n_cores = 1,          # no parallizing       warmstart = TRUE,       # uses the glasso         verbose = FALSE)  # Print results print(cvn) #> Covariate-varying Network (CVN) #>  #> ✓ all converged #>  #> Number of graphs (m)    : 9 #> Number of variables (p) : 10 #> Number of lambda pairs  : 6 #>  #> Weight matrix (W): #> 9 x 9 sparse Matrix of class \"dsCMatrix\" #>                         #>  [1,] . 1 . 1 . . . . . #>  [2,] 1 . 1 . 1 . . . . #>  [3,] . 1 . . . 1 . . . #>  [4,] 1 . . . 1 . 1 . . #>  [5,] . 1 . 1 . 1 . 1 . #>  [6,] . . 1 . 1 . . . 1 #>  [7,] . . . 1 . . . 1 . #>  [8,] . . . . 1 . 1 . 1 #>  [9,] . . . . . 1 . 1 . #>  #>   id lambda1 lambda2      gamma1       gamma2 converged       value #> 1  1    0.50     1.0 0.001234568 0.0006172840      TRUE 0.008176557 #> 2  2    1.25     1.0 0.003086420 0.0006172840      TRUE 0.008932883 #> 3  3    2.00     1.0 0.004938272 0.0006172840      TRUE 0.009769567 #> 4  4    0.50     1.5 0.001234568 0.0009259259      TRUE 0.009720175 #> 5  5    1.25     1.5 0.003086420 0.0009259259      TRUE 0.009410001 #> 6  6    2.00     1.5 0.004938272 0.0009259259      TRUE 0.009319307 #>   n_iterations      aic      bic      ebic edges_median edges_iqr #> 1           16 5255.323 6071.667  8586.090           29         6 #> 2           19 4763.677 5258.571  6778.278           18         3 #> 3           22 4476.400 4769.034  5662.437           10         2 #> 4           19 5724.758 6922.427 10606.563           44         1 #> 5           22 4682.392 5122.325  6476.245           16         3 #> 6           26 4404.656 4651.844  5407.092            8         1"},{"path":"https://bips-hb.github.io/CVN/articles/cvn-vignette.html","id":"an-alternative-tuning-parameterization","dir":"Articles","previous_headings":"","what":"An Alternative Tuning Parameterization","title":"Covariate-Varying Networks","text":"manuscript, also introduce alternative tuning parameterization. Due algorithm’s computational complexity, performing exhaustive naive search across broad range potential values usually feasible. realized introducing different external covariate, thereby altering number graphs mm, considering different variables, changes pp, impacts interpretation meaning tuning parameters λ1\\lambda_1 λ2\\lambda_2. words, one selects optimal values λ1\\lambda_1 λ2\\lambda_2 slightly alters dataset, values may longer informative new dataset. address issue, propose new parameterization, denoted γ1\\gamma_1 γ2\\gamma_2, replacing λ1\\lambda_1 λ2\\lambda_2. Unlike previous tuning parameters penalize entire precision matrix differences precision matrices, γ1\\gamma_1 γ2\\gamma_2 used penalize individual edges. alternative tuning parameterization remains robust changing number variables graphs CVN model. might also beneficial applications well. results table CVN model includes gamma tuning parameters default, much smaller lambda values (see manuscript information).","code":""},{"path":"https://bips-hb.github.io/CVN/articles/cvn-vignette.html","id":"selecting-tuning-parameters","dir":"Articles","previous_headings":"","what":"Selecting Tuning Parameters","title":"Covariate-Varying Networks","text":"fitting CVN models, next step involves selecting suitable values tuning parameters (λ1,λ2)(\\lambda_1, \\lambda_2) (γ1,γ2)(\\gamma_1, \\gamma_2). choice tuning parameter determine network structure thus important challenging step.","code":""},{"path":"https://bips-hb.github.io/CVN/articles/cvn-vignette.html","id":"information-criteria","dir":"Articles","previous_headings":"Selecting Tuning Parameters","what":"Information Criteria","title":"Covariate-Varying Networks","text":"CVN package provides Akaike Information Criteria (AIC), Bayesian Information Criteria (BIC) extended BIC, can used select suitable values tuning parameters. calculation eBIC requires set parameter γeBIC∈[0,1]\\gamma_{eBIC} \\[0,1]. default set γebic=0.5\\gamma_{ebic} = 0.5. three information criteria returned CVN result table. 👍 Rule thumb: smaller IC value, better fit. package contains also option plotting results information criteria. plot map IC values every tuning parameter combination fitted CVN. yellow dot denotes tuning parameter combination shows smallest IC value.  also possible change γ\\gamma-value eBIC. default γ=0.5\\gamma = 0.5. Based information criteria, select CVN 6. , IC measures decide favour ID 6. However, always case. principle, AIC selects slightly denser models BIC. tuning graphs, many prefer eBIC, although specify value γeBIC\\gamma_{eBIC} well. simulations showed better results detecting true underlying graph using AIC BIC (eBIC included comparison). general perform rather poorly practice.","code":"# print results cvn$results #>   id lambda1 lambda2      gamma1       gamma2 converged       value #> 1  1    0.50     1.0 0.001234568 0.0006172840      TRUE 0.008176557 #> 2  2    1.25     1.0 0.003086420 0.0006172840      TRUE 0.008932883 #> 3  3    2.00     1.0 0.004938272 0.0006172840      TRUE 0.009769567 #> 4  4    0.50     1.5 0.001234568 0.0009259259      TRUE 0.009720175 #> 5  5    1.25     1.5 0.003086420 0.0009259259      TRUE 0.009410001 #> 6  6    2.00     1.5 0.004938272 0.0009259259      TRUE 0.009319307 #>   n_iterations      aic      bic      ebic edges_median edges_iqr #> 1           16 5255.323 6071.667  8586.090           29         6 #> 2           19 4763.677 5258.571  6778.278           18         3 #> 3           22 4476.400 4769.034  5662.437           10         2 #> 4           19 5724.758 6922.427 10606.563           44         1 #> 5           22 4682.392 5122.325  6476.245           16         3 #> 6           26 4404.656 4651.844  5407.092            8         1  # which combination of lambda values shows the best AIC? best.aic <- cvn$results[which.min(cvn$results$aic), \"id\"] cvn$results[best.aic,] #>   id lambda1 lambda2      gamma1       gamma2 converged       value #> 6  6       2     1.5 0.004938272 0.0009259259      TRUE 0.009319307 #>   n_iterations      aic      bic     ebic edges_median edges_iqr #> 6           26 4404.656 4651.844 5407.092            8         1 plot_information_criterion(cvn, criterion = \"aic\", use_gammas = FALSE) (dic <- determine_information_criterion_cvn(cvn, gamma = 0.9)) #>      [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     #> aic  5255.323 4763.677 4476.4   5724.758 4682.392 4404.656 #> bic  6071.667 5258.571 4769.034 6922.427 5122.325 4651.844 #> ebic 10597.63 7994.042 6377.159 13553.87 7559.381 6011.29"},{"path":"https://bips-hb.github.io/CVN/articles/cvn-vignette.html","id":"other-possibilities-to-select-a-cvn-model","dir":"Articles","previous_headings":"Selecting Tuning Parameters","what":"Other possibilities to select a CVN model","title":"Covariate-Varying Networks","text":"Although ICs objective measures, sometimes provide useless graphs (sparse, dense, …). approaches can used find suitable graph structure, like stability approaches. , however, based resampling strategies demand lot computational power. Others prefer assume sparsity density value select graph comes closest threshold output therefore also median number edges interquartile range (IQR) across mm estimated graphs CVN results output (see ).","code":""},{"path":"https://bips-hb.github.io/CVN/articles/cvn-vignette.html","id":"exploring-a-cvn","dir":"Articles","previous_headings":"","what":"Exploring a CVN","title":"Covariate-Varying Networks","text":"graph selected, usually interest investigation structure etc.","code":""},{"path":"https://bips-hb.github.io/CVN/articles/cvn-vignette.html","id":"extract-one-cvn-model","dir":"Articles","previous_headings":"Exploring a CVN","what":"Extract one CVN model","title":"Covariate-Varying Networks","text":"process becomes easier CVN model interest extracted single object list fitted CVNs investigation. example, aim examine CVN lowest AIC value, corresponds model ID 6.","code":"fit6 <- extract_cvn(cvn, 6)"},{"path":"https://bips-hb.github.io/CVN/articles/cvn-vignette.html","id":"plot-a-cvn-model","dir":"Articles","previous_headings":"Exploring a CVN","what":"Plot a CVN model","title":"Covariate-Varying Networks","text":"subgraphs CVN model can easily plotted. function requires visnet package visualize network structure CVN subgraphs. plot shows edges different color coding: Red edges: edges present mm subgraphs referred core edges. Blue edges: edges absent least one mm subgraphs. also possible generate plots every tuning parameter constellation mm fitted graphs one function.","code":"plot_cvn <- plot(fit6, verbose = FALSE) cvn <- plot(cvn)"},{"path":"https://bips-hb.github.io/CVN/articles/cvn-vignette.html","id":"differences-between-cvn-subgraphs","dir":"Articles","previous_headings":"Exploring a CVN","what":"Differences between CVN subgraphs","title":"Covariate-Varying Networks","text":"order examine differences subgraphs CVN model, possible determine number edges CVN subgraph analyze Hamming distances subgraphs. Hamming distance two graphs set nodes number edges differ . calculated counting edges need added removed transform one graph . following code shows number edges subgraph (E(g1), …, E(g9)), number edges shared graphs (E(core)) number edges unique subgraph (E(g1_u),…, E(g9_u)). can also print summary one extracted CVN (fit6 example). ouptut shows number edges subgraph (edges), number edges shared subgraphs (core_edges), number edges unique particular subgraph (unique_edges). option return result matrix heatmap plot. number cell reflects number different edges two graphs.  expected, heatmap shows graph structures change randomly along two covariates. pattern can seen","code":"cvn_edge_summary(cvn) #>   E(g1) E(g2) E(g3) E(g4) E(g5) E(g6) E(g7) E(g8) E(g9) E(core) E(g1_u) E(g2_u) #> 1    68    52    56    64    56    56    68    68    58      12       6       0 #> 2    44    32    36    38    32    30    44    38    36       1      14       0 #> 3    28    22    20    22    18    16    36    18    14       0      12       2 #> 4    90    88    88    88    88    88    90    90    90      44       0       0 #> 5    36    28    30    32    32    28    38    38    32       2      12       0 #> 6    28    18    16    18    16    16    22    16    14       1      12       0 #>   E(g3_u) E(g4_u) E(g5_u) E(g6_u) E(g7_u) E(g8_u) E(g9_u) #> 1       0       0       0       0       0       0       0 #> 2       0       0       2       0       4       0       0 #> 3       4       0       2       0      10       0       2 #> 4       0       0       0       0       0       0       0 #> 5       4       0       2       0       4       2       2 #> 6       2       0       2       4       4       2       2 cvn_edge_summary(fit6) #>   edges core_edges unique_edges #> 1    28          1           12 #> 2    18          1            0 #> 3    16          1            2 #> 4    18          1            0 #> 5    16          1            2 #> 6    16          1            4 #> 7    22          1            4 #> 8    16          1            2 #> 9    14          1            2 # Calculate Hamming distance matrix and plot it as heat map # plot_hamming_distances_cvn(fit3)  hd_matrix <- hamming_distance_adj_matrices(fit6$adj_matrices[[1]])  plot_hamming_distances(hd_matrix)"},{"path":"https://bips-hb.github.io/CVN/articles/cvn-vignette.html","id":"interpolation-of-subgraphs-based-an-previously-fitted-cvn-model","dir":"Articles","previous_headings":"","what":"Interpolation of subgraphs based an previously fitted CVN model","title":"Covariate-Varying Networks","text":"also proposed method interpolate subgraph collected data. can done using estimated CVN model based mm graphs. Let us assume Gm+1G_{m+1} represent graph want interpolate. , need set vector smoothing coefficients determine amount smoothing new graph Gm+1G_{m+1} mm original graphs. example, suppose want interpolate graph smoothed graphs 8 9, structure weighted 0.5 . Note, function still work progress yet investigate performance simulation study. therefore used caution.","code":"# interpolate generates objects of class 'cvn_interpolate' interpolate6 <- interpolate(fit6, c(0,0,0,0,0,0,0,0.5,0.5), truncate = 0.05) cvn6 <- combine_cvn_interpolated(fit6, interpolate6) # plot with title plot10 <- visnetwork_cvn(cvn6, verbose = FALSE,                 title = lapply(1:cvn6$n_lambda_values,                           function(i){sapply(1:cvn6$m, function(j) paste(\"Graph\", j))}                          ))"},{"path":"https://bips-hb.github.io/CVN/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ronja Foraita. Author, maintainer. Louis Dijkstra. Author. Lukas Burk. Contributor. DFG. Funder. Leibniz Institute Prevention Research Epidemiology - BIPS. Copyright holder.           02c22vc57","code":""},{"path":"https://bips-hb.github.io/CVN/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Foraita R, Dijkstra L (2025). CVN: Covariate-Varying Networks. R package version 1.1, https://arxiv.org/abs/2407.19978, https://bips-hb.github.io/CVN/, https://github.com/bips-hb/CVN.","code":"@Manual{,   title = {CVN: Covariate-Varying Networks},   author = {Ronja Foraita and Louis Dijkstra},   year = {2025},   note = {R package version 1.1, https://arxiv.org/abs/2407.19978,     https://bips-hb.github.io/CVN/},   url = {https://github.com/bips-hb/CVN}, }"},{"path":"https://bips-hb.github.io/CVN/index.html","id":"covariate-varying-networks-cvn","dir":"","previous_headings":"","what":"Covariate-Varying Networks","title":"Covariate-Varying Networks","text":"CVN R package estimating high-dimensional Gaussian graphical models change multiple external covariates. model flexible, sense complex smoothing patterns individual graphs can used. See vignette information.","code":"?CVN"},{"path":"https://bips-hb.github.io/CVN/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Covariate-Varying Networks","text":"install, simply type R","code":"devtools::install_github(\"bips-hb/CVN\")"},{"path":"https://bips-hb.github.io/CVN/index.html","id":"reference","dir":"","previous_headings":"","what":"Reference","title":"Covariate-Varying Networks","text":"Louis Dijkstra, Arne Godt, Ronja Foraita (2024).Inferring High-Dimensional Dynamic Networks Changing Multiple Covariateshttps://arxiv.org/abs/2407.19978","code":""},{"path":"https://bips-hb.github.io/CVN/index.html","id":"acknowledgement","dir":"","previous_headings":"","what":"Acknowledgement","title":"Covariate-Varying Networks","text":"DFG - Deutsche Forschungsgemeinschaft (FO 1045/2-1)","code":""},{"path":"https://bips-hb.github.io/CVN/index.html","id":"author-team","dir":"","previous_headings":"","what":"Author Team","title":"Covariate-Varying Networks","text":"Louis Dijkstra (Creator main author) Ronja Foraita (Maintainer, author) Lukas Burk (Contributor)","code":""},{"path":"https://bips-hb.github.io/CVN/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Covariate-Varying Networks","text":"Ronja Foraita Leibniz Institute Prevention Research Epidemiology - BIPS E-Mail: R () leibniz-bips.de","code":""},{"path":"https://bips-hb.github.io/CVN/reference/CVN-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Covariate-varying Networks — CVN-package","title":"Covariate-varying Networks — CVN-package","text":"Inferring high-dimensional Gaussian graphical networks change multiple discrete covariates.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/CVN-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Covariate-varying Networks — CVN-package","text":"Dijkstra L, Godt , Foraita R Inferring High-Dimensional Dynamic Networks Changing Multiple Covariates (2024), Arxiv, https://arxiv.org/abs/2407.19978.","code":""},{"path":[]},{"path":"https://bips-hb.github.io/CVN/reference/CVN-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Covariate-varying Networks — CVN-package","text":"Louis Dijkstra Maintainer contributors: Lukas Burk, Ronja Foraita <foraita@leibniz-bips.de>","code":""},{"path":"https://bips-hb.github.io/CVN/reference/CVN-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Covariate-varying Networks — CVN-package","text":"","code":"data(grid) W <- create_weight_matrix(type = \"grid\", k=3, l=3, plot = FALSE)  cvn <- CVN(grid, W, lambda1 = 1, lambda2 = 1:2,             n_cores = 1,            eps = 1e-2, maxiter = 1000, verbose = TRUE) #> Estimating a CVN with 9 graphs... #>  #> Number of cores: 1 #> Uses a warmstart... #>  #> ------------------------- #> iteration 1  |  2.180956 #> iteration 2  |  0.115992 #> iteration 3  |  0.085702 #> iteration 4  |  0.030387 #> iteration 5  |  0.024326 #> iteration 6  |  0.016685 #> iteration 7  |  0.013629 #> iteration 8  |  0.012361 #> iteration 9  |  0.011060 #> iteration 10  |  0.009923 #> ------------------------- #> iteration 1  |  2.180956 #> iteration 2  |  0.115683 #> iteration 3  |  0.085927 #> iteration 4  |  0.029249 #> iteration 5  |  0.022338 #> iteration 6  |  0.017805 #> iteration 7  |  0.017968 #> iteration 8  |  0.015503 #> iteration 9  |  0.014200 #> iteration 10  |  0.012371 #> ------------------------- #> iteration 11  |  0.011107 #> iteration 12  |  0.010068 #> iteration 13  |  0.009907"},{"path":"https://bips-hb.github.io/CVN/reference/CVN.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimating a Covariate-Varying Network (CVN) — CVN","title":"Estimating a Covariate-Varying Network (CVN) — CVN","text":"Estimates covariate-varying network model (CVN), .e., \\(m\\) Gaussian graphical models change (multiple) external covariate(s). smoothing graphs specified \\((m \\times m)\\)-dimensional weight matrix \\(W\\). function returns estimated precision matrices graph.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/CVN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimating a Covariate-Varying Network (CVN) — CVN","text":"","code":"CVN(   data,   W,   lambda1 = 1:2,   lambda2 = 1:2,   gamma1 = NULL,   gamma2 = NULL,   rho = 1,   eps = 1e-04,   maxiter = 100,   truncate = 1e-05,   rho_genlasso = 1,   eps_genlasso = 1e-10,   maxiter_genlasso = 100,   truncate_genlasso = 1e-04,   n_cores = min(length(lambda1) * length(lambda2), detectCores() - 1),   normalized = FALSE,   warmstart = TRUE,   minimal = FALSE,   gamma_ebic = 0.5,   verbose = TRUE )"},{"path":"https://bips-hb.github.io/CVN/reference/CVN.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimating a Covariate-Varying Network (CVN) — CVN","text":"data list matrices, entry associated single graph. number columns matrix. Number observations can differ W \\((m \\times m)\\)-dimensional symmetric weight matrix \\(W\\) lambda1 Vector different \\(\\lambda_1\\). LASSO penalty terms (Default: 1:2) lambda2 Vector different \\(\\lambda_2\\). global smoothing parameter values (Default: 1:2) gamma1 vector \\(\\gamma_1\\)'s LASSO penalty terms, \\(\\gamma_1 = \\frac{2 \\lambda_1}{m p (1 - p)}\\). gamma1 set, value lambda1 ignored. (Default: NULL). gamma2 vector \\(\\gamma_2\\)'s global smoothing parameters, \\(\\gamma_2 = \\frac{4 \\lambda_2}{m(m-1)p(p-1)}\\). gamma2 set, value lambda2 ignored.(Default: NULL). rho \\(\\rho\\) penalty parameter global ADMM algorithm (Default: 1) eps relative difference two update steps smaller \\(\\epsilon\\), algorithm stops. (Default: 1e-4) maxiter Maximum number iterations (Default: 100) truncate values final \\(\\hat{\\Theta}_i\\)'s truncate set 0. (Default: 1e-5) rho_genlasso \\(\\rho\\) penalty parameter ADMM algorithm used solve generalized LASSO (Default: 1) eps_genlasso relative difference two update steps smaller \\(\\epsilon\\), algorithm stops. (Default: 1e-10) maxiter_genlasso Maximum number iterations solving generalized LASSO problem (Default: 100) truncate_genlasso values final \\(\\hat{\\beta}\\) truncate_genlasso set 0. (Default: 1e-4) n_cores Number cores used (Default: max. number cores - 1, total number penalty term pairs less) normalized Data normalized TRUE. Otherwise data centered (Default: FALSE) warmstart TRUE, use glasso package estimating individual graphs first (Default: TRUE) minimal TRUE, returned cvn minimal terms memory, .e., Theta, data Sigma returned (Default: FALSE) gamma_ebic Gamma value eBIC (Default: 0.5) verbose Verbose (Default: TRUE)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/CVN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimating a Covariate-Varying Network (CVN) — CVN","text":"CVN object containing estimates graphs    different value \\((\\lambda_1, \\lambda_2)\\). General results    different values \\((\\lambda_1, \\lambda_2)\\) can found data frame    results. consists multiple columns, namely: id id. corresponds indices lists lambda1 \\(\\lambda_1\\) value lambda2 \\(\\lambda_2\\) value gamma1 \\(\\gamma_1\\) value gamma2 \\(\\gamma_2\\) value converged whether algorithm converged value value negative log-likelihood function n_iterations number iterations ADMM aic Aikake information criterion bic Bayesian information criterion ebic Extended Bayesian information criterion edges_median Median number edges across m estimated graphs edges_iqr Interquartile range edges across m estimated graphs estimates precision matrices corresponding adjacency matrices    different values \\((\\lambda_1, \\lambda_2)\\) can found Theta list estimated precision matrices \\(\\{ \\hat{\\Theta}_i(\\lambda_1, \\lambda_2) \\}_{= 1}^m\\),                        (minimal = FALSE) adj_matrices list estimated adjacency matrices corresponding                               estimated precision matrices Theta. entries                               1 edge, 0 otherwise.                               matrices sparse using package Matrix addition, input given CVN function stored object well: Sigma Empirical covariance matrices \\(\\{\\hat{\\Sigma}_i\\}_{= 1}^m\\),                              (minimal = FALSE) m Number graphs p Number variables n_obs Vector length \\(m\\) number observations graph data data, normalized centered (minimal = FALSE) W \\((m \\times m)\\)-dimensional weight matrix \\(W\\) maxiter Maximum number iterations ADMM rho \\(\\rho\\) ADMM's penalty parameter eps stopping criterion \\(\\epsilon\\) truncate Truncation value \\(\\{ \\hat{\\Theta}_i \\}_{= 1}^m\\) maxiter_genlasso Maximum number iterations generarlzed LASSO rho_genlasso \\(\\rho\\) generalized LASSO penalty parameter eps_genlasso stopping criterion \\(\\epsilon\\) generalized LASSO truncate_genlasso Truncation value \\(\\beta\\) generalized LASSO n_lambda_values Total number \\((\\lambda_1, \\lambda_2)\\) value combinations normalized TRUE, data normalized. Otherwise data centered warmstart TRUE, warmstart used minimal TRUE, data, Theta Sigma added hits_border_aic TRUE, optimal model based AIC hits border \\((\\lambda_1, \\lambda_2)\\) hits_border_bic TRUE, optimal model based BIC hits border \\((\\lambda_1, \\lambda_2)\\)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/CVN.html","id":"reusing-estimates","dir":"Reference","previous_headings":"","what":"Reusing Estimates","title":"Estimating a Covariate-Varying Network (CVN) — CVN","text":"estimating graph different values \\(\\lambda_1\\) \\(\\lambda_2\\), use graph estimated (available) \\(\\lambda_1\\) \\(\\lambda_2\\) values closest .","code":""},{"path":"https://bips-hb.github.io/CVN/reference/CVN.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimating a Covariate-Varying Network (CVN) — CVN","text":"","code":"data(grid)  #' Choice of the weight matrix W. Each of 2 covariates has 3 categories #' (uniform random) W <- create_weight_matrix(\"uniform-random\", k = 3, l = 3)  # lambdas: lambda1 = 1  # can also be lambda1 = 1:2  lambda2 = 1  (fit <- CVN(data = grid,              W = W,              lambda1 = lambda1, lambda2 = lambda2,              n_cores = 1,             eps = 1e-2, maxiter = 200, # fast but imprecise             verbose = TRUE)) #> Estimating a CVN with 9 graphs... #>  #> Number of cores: 1 #> Uses a warmstart... #>  #> ------------------------- #> iteration 1  |  2.180956 #> iteration 2  |  0.115992 #> iteration 3  |  0.085703 #> iteration 4  |  0.030387 #> iteration 5  |  0.022670 #> iteration 6  |  0.017581 #> iteration 7  |  0.016135 #> iteration 8  |  0.014122 #> iteration 9  |  0.011050 #> iteration 10  |  0.010618 #> ------------------------- #> iteration 11  |  0.009648 #> Covariate-varying Network (CVN) #>  #> ✓ all converged #>  #> Number of graphs (m)    : 9 #> Number of variables (p) : 10 #> Number of lambda pairs  : 1 #>  #> Weight matrix (W): #> 9 x 9 sparse Matrix of class \"dsCMatrix\" #>                                                                             #>  [1,] .         0.6012593 0.3094466 0.3387542 0.2975096 0.2986163 0.3823848 #>  [2,] 0.6012593 .         0.5036383 0.5257210 0.4768016 0.5083998 0.7264707 #>  [3,] 0.3094466 0.5036383 .         0.2970355 0.2157332 0.2794692 0.3662958 #>  [4,] 0.3387542 0.5257210 0.2970355 .         0.2893602 0.2810684 0.3744014 #>  [5,] 0.2975096 0.4768016 0.2157332 0.2893602 .         0.2500744 0.3623793 #>  [6,] 0.2986163 0.5083998 0.2794692 0.2810684 0.2500744 .         0.3741879 #>  [7,] 0.3823848 0.7264707 0.3662958 0.3744014 0.3623793 0.3741879 .         #>  [8,] 0.3184479 0.5514783 0.2465658 0.2723133 0.3065248 0.2787839 0.4334903 #>  [9,] 0.2250348 0.4363431 0.3054915 0.2642960 0.1564069 0.2694153 0.3516440 #>                           #>  [1,] 0.3184479 0.2250348 #>  [2,] 0.5514783 0.4363431 #>  [3,] 0.2465658 0.3054915 #>  [4,] 0.2723133 0.2642960 #>  [5,] 0.3065248 0.1564069 #>  [6,] 0.2787839 0.2694153 #>  [7,] 0.4334903 0.3516440 #>  [8,] .         0.2091313 #>  [9,] 0.2091313 .         #>  #>   id lambda1 lambda2      gamma1      gamma2 converged       value n_iterations #> 1  1       1       1 0.002469136 0.000617284      TRUE 0.009647579           12 #>        aic      bic     ebic edges_median edges_iqr #> 1 14315.63 15748.48 18281.32           31         1"},{"path":"https://bips-hb.github.io/CVN/reference/check_correctness_input.html","id":null,"dir":"Reference","previous_headings":"","what":"Check whether Input is Valid — check_correctness_input","title":"Check whether Input is Valid — check_correctness_input","text":"Checks whether input function CVN valid. function return anything. execution function halts issue detected.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/check_correctness_input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check whether Input is Valid — check_correctness_input","text":"","code":"check_correctness_input(raw_data, W, lambda1, lambda2, gamma1, gamma2, rho)"},{"path":"https://bips-hb.github.io/CVN/reference/check_correctness_input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check whether Input is Valid — check_correctness_input","text":"raw_data list matrices. number columns matrix W \\((m \\times m)\\)-dimensional upper-triangular weight matrix \\(W\\) lambda1 vector \\(\\lambda_1\\)'s LASSO penalty terms lambda2 vector \\(\\lambda_2\\)'s global smoothing parameters gamma1 vector \\(\\gamma_1\\)'s LASSO penalty terms. Note \\(\\gamma_1 = \\frac{2 \\lambda_1}{m p (1 - p)}\\) gamma2 vector \\(\\gamma_2\\)'s global smoothing parameters. Note \\(\\gamma_2 = \\frac{4 \\lambda_2}{m(m-1)p(p-1)}\\) rho \\(\\rho\\) ADMM's penalty parameter","code":""},{"path":[]},{"path":"https://bips-hb.github.io/CVN/reference/combine_cvn_interpolated.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine CVN object with interpolated CVN object — combine_cvn_interpolated","title":"Combine CVN object with interpolated CVN object — combine_cvn_interpolated","text":"Combine interpolated CVN original CVN","code":""},{"path":"https://bips-hb.github.io/CVN/reference/combine_cvn_interpolated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine CVN object with interpolated CVN object — combine_cvn_interpolated","text":"","code":"combine_cvn_interpolated(cvn, cvn_interpolated)"},{"path":"https://bips-hb.github.io/CVN/reference/combine_cvn_interpolated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine CVN object with interpolated CVN object — combine_cvn_interpolated","text":"cvn CVN fit \\(m\\) graphs cvn_interpolated interpolated CVN fitted CVN model \\(m\\) graphs","code":""},{"path":"https://bips-hb.github.io/CVN/reference/combine_cvn_interpolated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine CVN object with interpolated CVN object — combine_cvn_interpolated","text":"'cvn_interpolated' object (see interpolate).","code":""},{"path":"https://bips-hb.github.io/CVN/reference/combine_cvn_interpolated.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine CVN object with interpolated CVN object — combine_cvn_interpolated","text":"","code":"path <- system.file(\"cvnfit.RData\", package = \"CVN\") load(path)  interpolate <- interpolate(fit, c(0,0,0,0,0,0,0,0.5,0.5), truncate = 0.05) fit10 <- combine_cvn_interpolated(fit, interpolate)"},{"path":"https://bips-hb.github.io/CVN/reference/create_edges_visnetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a data.frame for the Edges for visNetwork — create_edges_visnetwork","title":"Create a data.frame for the Edges for visNetwork — create_edges_visnetwork","text":"order visualize graph, need create data.frame can used visNetwork package. function returns needed data.frame given adjacency matrix.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/create_edges_visnetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a data.frame for the Edges for visNetwork — create_edges_visnetwork","text":"","code":"create_edges_visnetwork(adj_matrix)"},{"path":"https://bips-hb.github.io/CVN/reference/create_edges_visnetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a data.frame for the Edges for visNetwork — create_edges_visnetwork","text":"adj_matrix symmetric adjacency matrix","code":""},{"path":"https://bips-hb.github.io/CVN/reference/create_edges_visnetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a data.frame for the Edges for visNetwork — create_edges_visnetwork","text":"Data frame used input visNetwork","code":""},{"path":"https://bips-hb.github.io/CVN/reference/create_edges_visnetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a data.frame for the Edges for visNetwork — create_edges_visnetwork","text":"","code":"nodes <- create_nodes_visnetwork(n_nodes = 5, labels = LETTERS[1:5])  adj_matrix <- matrix(c(0, 1, 0, 1, 0,                        1, 0, 1, 0, 0,                        0, 1, 0, 0, 0,                        1, 0, 0, 0, 1,                        0, 0, 0, 1, 0), ncol = 5)  edges <- create_edges_visnetwork(adj_matrix)  shared_edges <- data.frame(from = c(1,2), to = c(4, 3))  edges <- set_attributes_to_edges_visnetwork(edges,                                             subset_edges = shared_edges,                                             width = c(3, .5),                                             color = c(\"red\", \"blue\"))  visnetwork(nodes, edges)   {\"x\":{\"nodes\":{\"id\":[1,2,3,4,5],\"title\":[\"A\",\"B\",\"C\",\"D\",\"E\"],\"x\":[1,0.2360679774997898,-0.9999999999999998,-1,0.2360679774997898],\"y\":[0,1,0.6180339887498951,-0.6180339887498947,-1],\"label\":[\"1\",\"2\",\"3\",\"4\",\"5\"]},\"edges\":{\"from\":[1,1,2,4],\"to\":[2,4,3,5],\"width\":[0.5,3,3,0.5],\"color\":[\"blue\",\"red\",\"red\",\"blue\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":false},\"physics\":{\"stabilization\":false},\"interaction\":{\"hover\":true,\"zoomSpeed\":1}},\"groups\":null,\"width\":\"100%\",\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"igraphlayout\":{\"type\":\"square\"},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\",\"highlight\":{\"enabled\":true,\"hoverNearest\":true,\"degree\":1,\"algorithm\":\"all\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":false,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://bips-hb.github.io/CVN/reference/create_nodes_visnetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Nodes for the visNetwork package — create_nodes_visnetwork","title":"Nodes for the visNetwork package — create_nodes_visnetwork","text":"Creates data frame can used visNetwork package.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/create_nodes_visnetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nodes for the visNetwork package — create_nodes_visnetwork","text":"","code":"create_nodes_visnetwork(n_nodes, labels = 1:n_nodes)"},{"path":"https://bips-hb.github.io/CVN/reference/create_nodes_visnetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nodes for the visNetwork package — create_nodes_visnetwork","text":"n_nodes Number nodes graph labels labels individual nodes (Default: 1:n_nodes)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/create_nodes_visnetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nodes for the visNetwork package — create_nodes_visnetwork","text":"Data frame two columns: id title","code":""},{"path":"https://bips-hb.github.io/CVN/reference/create_nodes_visnetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nodes for the visNetwork package — create_nodes_visnetwork","text":"","code":"nodes <- create_nodes_visnetwork(n_nodes = 5, labels = LETTERS[1:5])  adj_matrix <- matrix(c(0, 1, 0, 1, 0,                        1, 0, 1, 0, 0,                        0, 1, 0, 0, 0,                        1, 0, 0, 0, 1,                        0, 0, 0, 1, 0), ncol = 5)  edges <- create_edges_visnetwork(adj_matrix)  shared_edges <- data.frame(from = c(1,2), to = c(4, 3))  edges <- set_attributes_to_edges_visnetwork(edges,                                             subset_edges = shared_edges,                                             width = c(3, .5),                                             color = c(\"red\", \"blue\"))  visnetwork(nodes, edges)   {\"x\":{\"nodes\":{\"id\":[1,2,3,4,5],\"title\":[\"A\",\"B\",\"C\",\"D\",\"E\"],\"x\":[1,0.2360679774997898,-0.9999999999999998,-1,0.2360679774997898],\"y\":[0,1,0.6180339887498951,-0.6180339887498947,-1],\"label\":[\"1\",\"2\",\"3\",\"4\",\"5\"]},\"edges\":{\"from\":[1,1,2,4],\"to\":[2,4,3,5],\"width\":[0.5,3,3,0.5],\"color\":[\"blue\",\"red\",\"red\",\"blue\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":false},\"physics\":{\"stabilization\":false},\"interaction\":{\"hover\":true,\"zoomSpeed\":1}},\"groups\":null,\"width\":\"100%\",\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"igraphlayout\":{\"type\":\"square\"},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\",\"highlight\":{\"enabled\":true,\"hoverNearest\":true,\"degree\":1,\"algorithm\":\"all\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":false,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://bips-hb.github.io/CVN/reference/create_weight_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Different Weight Matrices — create_weight_matrix","title":"Different Weight Matrices — create_weight_matrix","text":"function generates different weight matrices two external covariates, \\(W\\). several types: full graphs fully connected weight 1 glasso graphs disconnected weight 0.              mimicks GLASSO, graph estimated independently grid weight matrix \\(k \\times l\\) grid uniform-random Fully-connected, entries drawn                    uniform distribution","code":""},{"path":"https://bips-hb.github.io/CVN/reference/create_weight_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Different Weight Matrices — create_weight_matrix","text":"","code":"create_weight_matrix(   type = c(\"full\", \"glasso\", \"grid\", \"uniform-random\"),   k,   l,   plot = FALSE )"},{"path":"https://bips-hb.github.io/CVN/reference/create_weight_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Different Weight Matrices — create_weight_matrix","text":"type type weight matrix k Number categories first external covariate l Number categories second external covariate plot TRUE, weight matrix plotted (default: FALSE)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/create_weight_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Different Weight Matrices — create_weight_matrix","text":"Weight matrix","code":""},{"path":"https://bips-hb.github.io/CVN/reference/create_weight_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Different Weight Matrices — create_weight_matrix","text":"","code":"W <- create_weight_matrix(type=\"grid\", k=3, l=2)"},{"path":"https://bips-hb.github.io/CVN/reference/cvn_edge_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Edge Overview — cvn_edge_summary","title":"Edge Overview — cvn_edge_summary","text":"Function gives overview number edges subgraph fitted CVN models.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/cvn_edge_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Edge Overview — cvn_edge_summary","text":"","code":"cvn_edge_summary(cvn)"},{"path":"https://bips-hb.github.io/CVN/reference/cvn_edge_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Edge Overview — cvn_edge_summary","text":"cvn cvn object","code":""},{"path":"https://bips-hb.github.io/CVN/reference/cvn_edge_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Edge Overview — cvn_edge_summary","text":"data.frame showing number edges subgraph, number edges present graphs (core edges) number edges unique subgraph","code":""},{"path":"https://bips-hb.github.io/CVN/reference/cvn_edge_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Edge Overview — cvn_edge_summary","text":"","code":"data(grid) W <- create_weight_matrix(\"grid\", 3, 3)  # lambdas: lambda1 = c(1, 1.5) lambda2 = .2  fit <- CVN(grid, W, lambda1 = lambda1, lambda2 = lambda2, n_cores = 1) #> Estimating a CVN with 9 graphs... #>  #> Number of cores: 1 #> Uses a warmstart... #>  #> ------------------------- #> iteration 1  |  2.180956 #> iteration 2  |  0.115992 #> iteration 3  |  0.074886 #> iteration 4  |  0.048989 #> iteration 5  |  0.026376 #> iteration 6  |  0.009400 #> iteration 7  |  0.006532 #> iteration 8  |  0.004188 #> iteration 9  |  0.003427 #> iteration 10  |  0.002602 #> ------------------------- #> iteration 11  |  0.002151 #> iteration 12  |  0.002050 #> iteration 13  |  0.001641 #> iteration 14  |  0.001472 #> iteration 15  |  0.001493 #> iteration 16  |  0.001085 #> iteration 17  |  0.000864 #> iteration 18  |  0.000816 #> iteration 19  |  0.000768 #> iteration 20  |  0.000608 #> ------------------------- #> iteration 21  |  0.000582 #> iteration 22  |  0.000563 #> iteration 23  |  0.000575 #> iteration 24  |  0.000516 #> iteration 25  |  0.000486 #> iteration 26  |  0.000449 #> iteration 27  |  0.000419 #> iteration 28  |  0.000404 #> iteration 29  |  0.000372 #> iteration 30  |  0.000355 #> ------------------------- #> iteration 31  |  0.000335 #> iteration 32  |  0.000322 #> iteration 33  |  0.000300 #> iteration 34  |  0.000281 #> iteration 35  |  0.000272 #> iteration 36  |  0.000262 #> iteration 37  |  0.000257 #> iteration 38  |  0.000245 #> iteration 39  |  0.000236 #> iteration 40  |  0.000227 #> ------------------------- #> iteration 41  |  0.000213 #> iteration 42  |  0.000205 #> iteration 43  |  0.000193 #> iteration 44  |  0.000183 #> iteration 45  |  0.000175 #> iteration 46  |  0.000169 #> iteration 47  |  0.000163 #> iteration 48  |  0.000157 #> iteration 49  |  0.000152 #> iteration 50  |  0.000140 #> ------------------------- #> iteration 51  |  0.000136 #> iteration 52  |  0.000109 #> iteration 53  |  0.000114 #> iteration 54  |  0.000102 #> iteration 55  |  0.000101 #> iteration 56  |  0.000093 #> ------------------------- #> iteration 1  |  1.887193 #> iteration 2  |  0.135032 #> iteration 3  |  0.091797 #> iteration 4  |  0.051830 #> iteration 5  |  0.029767 #> iteration 6  |  0.023468 #> iteration 7  |  0.011319 #> iteration 8  |  0.007583 #> iteration 9  |  0.006705 #> iteration 10  |  0.004910 #> ------------------------- #> iteration 11  |  0.004122 #> iteration 12  |  0.003544 #> iteration 13  |  0.003412 #> iteration 14  |  0.002673 #> iteration 15  |  0.002175 #> iteration 16  |  0.001636 #> iteration 17  |  0.001523 #> iteration 18  |  0.001362 #> iteration 19  |  0.001236 #> iteration 20  |  0.001114 #> ------------------------- #> iteration 21  |  0.001057 #> iteration 22  |  0.001067 #> iteration 23  |  0.000890 #> iteration 24  |  0.000790 #> iteration 25  |  0.000728 #> iteration 26  |  0.000669 #> iteration 27  |  0.000636 #> iteration 28  |  0.000607 #> iteration 29  |  0.000556 #> iteration 30  |  0.000526 #> ------------------------- #> iteration 31  |  0.000482 #> iteration 32  |  0.000464 #> iteration 33  |  0.000436 #> iteration 34  |  0.000424 #> iteration 35  |  0.000383 #> iteration 36  |  0.000331 #> iteration 37  |  0.000316 #> iteration 38  |  0.000308 #> iteration 39  |  0.000319 #> iteration 40  |  0.000290 #> ------------------------- #> iteration 41  |  0.000277 #> iteration 42  |  0.000259 #> iteration 43  |  0.000251 #> iteration 44  |  0.000218 #> iteration 45  |  0.000194 #> iteration 46  |  0.000216 #> iteration 47  |  0.000192 #> iteration 48  |  0.000183 #> iteration 49  |  0.000177 #> iteration 50  |  0.000171 #> ------------------------- #> iteration 51  |  0.000165 #> iteration 52  |  0.000160 #> iteration 53  |  0.000151 #> iteration 54  |  0.000130 #> iteration 55  |  0.000115 #> iteration 56  |  0.000106 #> iteration 57  |  0.000103 #> iteration 58  |  0.000100  # Edge summary for a list of CVN models cvn_edge_summary(fit) #>   E(g1) E(g2) E(g3) E(g4) E(g5) E(g6) E(g7) E(g8) E(g9) E(core) E(g1_u) E(g2_u) #> 1    84    86    84    82    84    88    88    90    84      34       0       0 #> 2    86    84    86    82    80    82    86    90    82      32       0       0 #>   E(g3_u) E(g4_u) E(g5_u) E(g6_u) E(g7_u) E(g8_u) E(g9_u) #> 1       0       0       0       0       0       0       0 #> 2       0       0       0       0       0       0       0  # Edge summary for a single CVN fit2 <- extract_cvn(fit, id = 2) cvn_edge_summary(fit2)                  #>   edges core_edges unique_edges #> 1    86         32            0 #> 2    84         32            0 #> 3    86         32            0 #> 4    82         32            0 #> 5    80         32            0 #> 6    82         32            0 #> 7    86         32            0 #> 8    90         32            0 #> 9    82         32            0"},{"path":"https://bips-hb.github.io/CVN/reference/determine_information_criterion_cvn.html","id":null,"dir":"Reference","previous_headings":"","what":"Information Criteria for a cvn object — determine_information_criterion_cvn","title":"Information Criteria for a cvn object — determine_information_criterion_cvn","text":"Determines given information criteria cvn object, see CVN.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/determine_information_criterion_cvn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information Criteria for a cvn object — determine_information_criterion_cvn","text":"","code":"determine_information_criterion_cvn(cvn, gamma = 0.5)"},{"path":"https://bips-hb.github.io/CVN/reference/determine_information_criterion_cvn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information Criteria for a cvn object — determine_information_criterion_cvn","text":"cvn CVN object, see CVN gamma gamma value eBIC (default: 0.5)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/determine_information_criterion_cvn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Information Criteria for a cvn object — determine_information_criterion_cvn","text":"","code":"path <- system.file(\"cvnfit.RData\", package = \"CVN\") load(path) determine_information_criterion_cvn(fit, gamma = 0.7) #>      [,1]     #> aic  4404.656 #> bic  4651.844 #> ebic 5709.191"},{"path":"https://bips-hb.github.io/CVN/reference/estimate.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate a CVN — estimate","title":"Estimate a CVN — estimate","text":"function estimating CVN single \\((\\lambda_1, \\lambda_2)\\)-value. See details CVN","code":""},{"path":"https://bips-hb.github.io/CVN/reference/estimate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate a CVN — estimate","text":"","code":"estimate(   m,   p,   W,   Theta0,   Z0,   Y0,   a,   eta1,   eta2,   Sigma,   n_obs,   rho,   rho_genlasso,   eps,   eps_genlasso,   maxiter,   maxiter_genlasso,   truncate,   truncate_genlasso,   verbose = FALSE )"},{"path":"https://bips-hb.github.io/CVN/reference/extract_cvn.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract CVN — extract_cvn","title":"Extract CVN — extract_cvn","text":"Function extracts one CVN CVN object contains one. helpful just one tuning parameter constellation wants , e.g., plotted.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/extract_cvn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract CVN — extract_cvn","text":"","code":"extract_cvn(cvn, id)"},{"path":"https://bips-hb.github.io/CVN/reference/extract_cvn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract CVN — extract_cvn","text":"cvn CVN object, see CVN id Integer; id CVN object extracted","code":""},{"path":"https://bips-hb.github.io/CVN/reference/extract_cvn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract CVN — extract_cvn","text":"CVN object","code":""},{"path":"https://bips-hb.github.io/CVN/reference/extract_cvn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract CVN — extract_cvn","text":"","code":"if (FALSE) { # \\dontrun{ # Example code of usage (not run because of longer running time)  data(grid) W <- create_weight_matrix(\"grid\", 3, 3) fit <-  CVN(grid, W, n_cores = 1,             lambda1 = c(0.5, 1),              lambda2 = c(0.1, 0.5))  (fit2 <- extract_cvn(fit, id = 2)) } # }"},{"path":"https://bips-hb.github.io/CVN/reference/find_core_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"The Core Graph — find_core_graph","title":"The Core Graph — find_core_graph","text":"Finds 'core graph', .e., edges present estimated graphs","code":""},{"path":"https://bips-hb.github.io/CVN/reference/find_core_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Core Graph — find_core_graph","text":"","code":"find_core_graph(cvn)"},{"path":"https://bips-hb.github.io/CVN/reference/find_core_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Core Graph — find_core_graph","text":"cvn cvn object","code":""},{"path":"https://bips-hb.github.io/CVN/reference/find_core_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Core Graph — find_core_graph","text":"list adjacency matrix, one         value (lambda1, lambda2)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/find_core_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Core Graph — find_core_graph","text":"","code":"path <- system.file(\"cvnfit.RData\", package = \"CVN\") load(path) find_core_graph(fit)  #> [[1]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]    0    0    0    0    1    0    0    0    0     0 #>  [2,]    0    0    0    0    0    0    0    0    0     0 #>  [3,]    0    0    0    0    0    0    0    0    0     0 #>  [4,]    0    0    0    0    0    0    0    0    0     0 #>  [5,]    1    0    0    0    0    0    0    0    0     0 #>  [6,]    0    0    0    0    0    0    0    0    0     0 #>  [7,]    0    0    0    0    0    0    0    0    0     0 #>  [8,]    0    0    0    0    0    0    0    0    0     0 #>  [9,]    0    0    0    0    0    0    0    0    0     0 #> [10,]    0    0    0    0    0    0    0    0    0     0 #>"},{"path":"https://bips-hb.github.io/CVN/reference/find_unique_edges.html","id":null,"dir":"Reference","previous_headings":"","what":"Unique Edges — find_unique_edges","title":"Unique Edges — find_unique_edges","text":"Function finds edges present one subgraph CVN model.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/find_unique_edges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unique Edges — find_unique_edges","text":"","code":"find_unique_edges(cvn)"},{"path":"https://bips-hb.github.io/CVN/reference/find_unique_edges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unique Edges — find_unique_edges","text":"cvn cvn object","code":""},{"path":"https://bips-hb.github.io/CVN/reference/find_unique_edges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unique Edges — find_unique_edges","text":"list adjacency matrix, one         value (lambda1, lambda2), showing edges unique         single subgraph.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/find_unique_edges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unique Edges — find_unique_edges","text":"","code":"path <- system.file(\"cvnfit.RData\", package = \"CVN\") load(path)                    ue <- find_unique_edges(fit)  # Graph 3 has unique edges ue[[1]][[3]] #> 10 x 10 sparse Matrix of class \"dsCMatrix\" #>                           #>  [1,] . 1 . . . . . . . . #>  [2,] 1 . . . . . . . . . #>  [3,] . . . . . . . . . . #>  [4,] . . . . . . . . . . #>  [5,] . . . . . . . . . . #>  [6,] . . . . . . . . . . #>  [7,] . . . . . . . . . . #>  [8,] . . . . . . . . . . #>  [9,] . . . . . . . . . . #> [10,] . . . . . . . . . ."},{"path":"https://bips-hb.github.io/CVN/reference/genlassoRcpp.html","id":null,"dir":"Reference","previous_headings":"","what":"Generalized LASSO — genlassoRcpp","title":"Generalized LASSO — genlassoRcpp","text":"Solving Generalized LASSO fixed \\(\\lambda = 1\\) Solves efficiently generalized LASSO problem form $$   \\hat{\\beta} = \\text{argmin } \\frac{1}{2} || y - \\beta ||_2^2 + ||D\\beta||_1 $$ \\(\\beta\\) \\(y\\) \\(m\\)-dimensional vectors \\(D\\) \\((c \\times m)\\)-matrix \\(c \\geq m\\). solve optimization problem using adaption ADMM algorithm presented Zhu (2017).","code":""},{"path":"https://bips-hb.github.io/CVN/reference/genlassoRcpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generalized LASSO — genlassoRcpp","text":"","code":"genlassoRcpp(Y, W, m, eta1, eta2, a, rho, max_iter, eps, truncate)"},{"path":"https://bips-hb.github.io/CVN/reference/genlassoRcpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generalized LASSO — genlassoRcpp","text":"Y \\(y\\) vector length \\(m\\) W weight matrix \\(W\\) dimensions \\(m x m\\) m number graphs eta1 Equals \\(\\lambda_1 / rho\\) eta2 Equals \\(\\lambda_2 / rho\\) Value added diagonal \\(-D'D\\) matrix positive definite, see matrix_A_inner_ADMM rho ADMM's parameter max_iter Maximum number iterations eps Stopping criterion. differences smaller \\(\\epsilon\\), algorithm halted truncate Values truncate set 0","code":""},{"path":"https://bips-hb.github.io/CVN/reference/genlassoRcpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generalized LASSO — genlassoRcpp","text":"estimated vector \\(\\hat{\\beta}\\)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/genlassoRcpp.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generalized LASSO — genlassoRcpp","text":"Zhu, Y. (2017). Augmented ADMM Algorithm Application Generalized Lasso Problem. Journal Computational Graphical Statistics, 26(1), 195–204. https://doi.org/10.1080/10618600.2015.1114491","code":""},{"path":[]},{"path":"https://bips-hb.github.io/CVN/reference/genlassoRcpp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generalized LASSO — genlassoRcpp","text":"Louis Dijkstra","code":""},{"path":"https://bips-hb.github.io/CVN/reference/genlasso_wrapper.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for genlassoRcpp — genlasso_wrapper","title":"Wrapper for genlassoRcpp — genlasso_wrapper","text":"See details genlassoRcpp","code":""},{"path":"https://bips-hb.github.io/CVN/reference/genlasso_wrapper.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for genlassoRcpp — genlasso_wrapper","text":"","code":"genlasso_wrapper(y, W, m, eta1, eta2, a, rho, max_iter, eps, truncate)"},{"path":"https://bips-hb.github.io/CVN/reference/genlasso_wrapper.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for genlassoRcpp — genlasso_wrapper","text":"y numeric vector W Weight matrix m Number graphs eta1 lambda1 / rho, \\(\\rho\\) penalty parameter global ADMM algorithm (Default: 1) eta2 lambda2 / rho constant rho \\(\\rho\\) penalty parameter ADMM algorithm max_iter Maximum number iterations (Default: 100) eps relative difference two update steps smaller \\(\\epsilon\\), algorithm stops. See relative_difference_precision_matrices (Default: 1e-4) truncate values final \\(\\hat{\\Theta}_i\\)'s truncate set 0. (Default: 1e-4)","code":""},{"path":[]},{"path":"https://bips-hb.github.io/CVN/reference/grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Data for a grid of graphs (3 x 3) — grid","title":"Data for a grid of graphs (3 x 3) — grid","text":"Data generated 9 graphs total, organized grid (3x3). data set 10 variables drawn multinormal distribution given 9 adjacency matrices reflecting graph structure follows Erdös-Rényi graph probability 0.5. number edges removed added step `x`- `y` direction 2.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data for a grid of graphs (3 x 3) — grid","text":"","code":"data(grid)"},{"path":"https://bips-hb.github.io/CVN/reference/hamming_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural Hamming Distance for a cvn Object — hamming_distance","title":"Structural Hamming Distance for a cvn Object — hamming_distance","text":"Returns structural Hamming distances","code":""},{"path":"https://bips-hb.github.io/CVN/reference/hamming_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural Hamming Distance for a cvn Object — hamming_distance","text":"","code":"hamming_distance(cvn, verbose = TRUE)"},{"path":"https://bips-hb.github.io/CVN/reference/hamming_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural Hamming Distance for a cvn Object — hamming_distance","text":"cvn cvn object created CVN function verbose TRUE, shows progress bar","code":""},{"path":"https://bips-hb.github.io/CVN/reference/hamming_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural Hamming Distance for a cvn Object — hamming_distance","text":"list symmetric matrices. matrix contains structural         Hamming distances different graphs. item         list corresponds one \\((\\lambda_1, \\lambda_2)\\) pair","code":""},{"path":[]},{"path":"https://bips-hb.github.io/CVN/reference/hamming_distance_adj_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Structural Hamming Distance — hamming_distance_adj_matrices","title":"Structural Hamming Distance — hamming_distance_adj_matrices","text":"Returns structural Hamming distance multiple graphs","code":""},{"path":"https://bips-hb.github.io/CVN/reference/hamming_distance_adj_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Structural Hamming Distance — hamming_distance_adj_matrices","text":"","code":"hamming_distance_adj_matrices(adj_matrices)"},{"path":"https://bips-hb.github.io/CVN/reference/hamming_distance_adj_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Structural Hamming Distance — hamming_distance_adj_matrices","text":"adj_matrices list adjacency matrices","code":""},{"path":"https://bips-hb.github.io/CVN/reference/hamming_distance_adj_matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Structural Hamming Distance — hamming_distance_adj_matrices","text":"Matrix Hamming distances","code":""},{"path":"https://bips-hb.github.io/CVN/reference/hamming_distance_adj_matrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Structural Hamming Distance — hamming_distance_adj_matrices","text":"","code":"path <- system.file(\"cvnfit.RData\", package = \"CVN\") load(path)  hamming_distance_adj_matrices(fit$adj_matrices[[1]]) #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #>  [1,]    0   11   16   15   14   14   17   16   13 #>  [2,]   11    0    7   10    5    9   12   11   12 #>  [3,]   16    7    0   13   10    8   17   12   11 #>  [4,]   15   10   13    0    7    9    4    7   10 #>  [5,]   14    5   10    7    0    8   11    8   11 #>  [6,]   14    9    8    9    8    0   13   10    9 #>  [7,]   17   12   17    4   11   13    0    9   12 #>  [8,]   16   11   12    7    8   10    9    0    5 #>  [9,]   13   12   11   10   11    9   12    5    0 #> attr(,\"class\") #> [1] \"cvn:distancematrix\""},{"path":"https://bips-hb.github.io/CVN/reference/hd_weight_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap Plot of the Weight Matrix — hd_weight_matrix","title":"Heatmap Plot of the Weight Matrix — hd_weight_matrix","text":"Returns heatmap weight matrix","code":""},{"path":"https://bips-hb.github.io/CVN/reference/hd_weight_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap Plot of the Weight Matrix — hd_weight_matrix","text":"","code":"hd_weight_matrix(   W,   title = \"\",   legend_label = \"weight\",   add_counts_to_cells = TRUE,   add_ticks_labels = TRUE,   t = -6,   r = -8 )"},{"path":"https://bips-hb.github.io/CVN/reference/hd_weight_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap Plot of the Weight Matrix — hd_weight_matrix","text":"W Weight matrix title Title plot (Default none) legend_label Title legend (Default: \"weight\") add_counts_to_cells TRUE, counts matrix added plot (Default: TRUE) add_ticks_labels TRUE, number corresponding graph add plot (Default: TRUE) t Distance tick labels x-axis (Default: -6) r Distance tick labels y-axis (Default: -8)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/hd_weight_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap Plot of the Weight Matrix — hd_weight_matrix","text":"heatmap plot","code":""},{"path":[]},{"path":"https://bips-hb.github.io/CVN/reference/hd_weight_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap Plot of the Weight Matrix — hd_weight_matrix","text":"","code":"W_uniform <- round(create_weight_matrix(type=\"uniform-random\", 3, 2), 2) hd_weight_matrix(W_uniform, title = \"2 external covariates with 3 and 2 categories respectively\")"},{"path":"https://bips-hb.github.io/CVN/reference/hits_end_lambda_intervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Hitting the end points of \\((\\lambda_1, \\lambda_2)\\) interval — hits_end_lambda_intervals","title":"Hitting the end points of \\((\\lambda_1, \\lambda_2)\\) interval — hits_end_lambda_intervals","text":"One often selected optimal model \\((\\lambda_1, \\lambda_2)\\)-values based AIC BIC. function checks warns optimal value lies border values \\((\\lambda_1, \\lambda_2)\\) takes.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/hits_end_lambda_intervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hitting the end points of \\((\\lambda_1, \\lambda_2)\\) interval — hits_end_lambda_intervals","text":"","code":"hits_end_lambda_intervals(results)"},{"path":"https://bips-hb.github.io/CVN/reference/hits_end_lambda_intervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hitting the end points of \\((\\lambda_1, \\lambda_2)\\) interval — hits_end_lambda_intervals","text":"results Results CVN function","code":""},{"path":"https://bips-hb.github.io/CVN/reference/hits_end_lambda_intervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hitting the end points of \\((\\lambda_1, \\lambda_2)\\) interval — hits_end_lambda_intervals","text":"List two values: hits_border_aic TRUE, hits border AIC hits_border_bic TRUE, hits border BIC","code":""},{"path":"https://bips-hb.github.io/CVN/reference/interpolate.html","id":null,"dir":"Reference","previous_headings":"","what":"Interpolation of a Graph — interpolate","title":"Interpolation of a Graph — interpolate","text":"Estimates graph observation based previously fitted CVN model","code":""},{"path":"https://bips-hb.github.io/CVN/reference/interpolate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interpolation of a Graph — interpolate","text":"","code":"interpolate(cvn, weights, truncate = NULL)"},{"path":"https://bips-hb.github.io/CVN/reference/interpolate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interpolation of a Graph — interpolate","text":"cvn CVN fit \\(m\\) graphs weights vector length \\(m\\) regression coefficients truncate Truncation value. value precision matrix considered 0. NULL, truncation used fitted CVN model (Default)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/interpolate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interpolation of a Graph — interpolate","text":"'cvn_interpolated' object, list adj_matrices list adjacency matrix. One pair                               \\((\\lambda_1, \\lambda_2)\\) values.                               entries 1 edge, 0 otherwise.                               matrices sparse using package Matrix m Number graphs p Number variables weights weights used interpolation truncate Truncation value n_lambda_values Total number \\((\\lambda_1, \\lambda_2)\\) value combinations results. consists two columns: lambda1 \\(\\lambda_1\\) value lambda2 \\(\\lambda_2\\) value","code":""},{"path":"https://bips-hb.github.io/CVN/reference/interpolate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interpolation of a Graph — interpolate","text":"","code":"path <- system.file(\"cvnfit.RData\", package = \"CVN\") load(path)  interpolate <- interpolate(fit, c(0,0,0,0,0,0,0,0.5,0.5), truncate = 0.05) fit10 <- combine_cvn_interpolated(fit, interpolate) fit10 <- visnetwork_cvn(fit10) #> Warning: Works only if the original cvn was combined with an interpolated cvn using  #>             the function 'combine_cvn_interpolated'. #> Creating visNetwork plots for the CVN... #>  #> Number of graphs:                  10 #> Number of different lambda values: 1 #> Creating nodes... #> Determining the 'core graphs'... #> Create the subset of edges in the core graphs... #>  #>  #> Create plots given the determined edges... #>   if (requireNamespace(\"htmltools\", quietly = TRUE)) { htmltools::browsable(htmltools::tagList(   htmltools::div(style = \"display: grid; grid-template-columns: repeat(3, 1fr);                   column-gap: 1px; row-gap: -10px\",     fit10$plots[[1]][8:10]))) } else { plot10$plots[[1]][8:10] }        {\"x\":{\"nodes\":{\"id\":[1,2,3,4,5,6,7,8,9,10],\"title\":[1,2,3,4,5,6,7,8,9,10],\"x\":[1,0.8090169943749475,0.3090169943749475,-0.3090169943749473,-0.8090169943749473,-1,-0.8090169943749476,-0.3090169943749476,0.3090169943749472,0.8090169943749475],\"y\":[0,0.6180339887498949,1,1,0.6180339887498951,2.220446049250313e-16,-0.6180339887498947,-0.9999999999999999,-1,-0.6180339887498951],\"label\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"]},\"edges\":{\"from\":[1,3,3,4,4,5,5,6],\"to\":[5,8,10,7,9,7,8,10]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":false},\"physics\":{\"stabilization\":false},\"interaction\":{\"hover\":true,\"zoomSpeed\":1}},\"groups\":null,\"width\":\"100%\",\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"igraphlayout\":{\"type\":\"square\"},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\",\"highlight\":{\"enabled\":true,\"hoverNearest\":true,\"degree\":1,\"algorithm\":\"all\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":false,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"}},\"evals\":[],\"jsHooks\":[]}   {\"x\":{\"nodes\":{\"id\":[1,2,3,4,5,6,7,8,9,10],\"title\":[1,2,3,4,5,6,7,8,9,10],\"x\":[1,0.8090169943749475,0.3090169943749475,-0.3090169943749473,-0.8090169943749473,-1,-0.8090169943749476,-0.3090169943749476,0.3090169943749472,0.8090169943749475],\"y\":[0,0.6180339887498949,1,1,0.6180339887498951,2.220446049250313e-16,-0.6180339887498947,-0.9999999999999999,-1,-0.6180339887498951],\"label\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"]},\"edges\":{\"from\":[1,3,3,4,4,5,6],\"to\":[5,4,8,7,9,10,10]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":false},\"physics\":{\"stabilization\":false},\"interaction\":{\"hover\":true,\"zoomSpeed\":1}},\"groups\":null,\"width\":\"100%\",\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"igraphlayout\":{\"type\":\"square\"},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\",\"highlight\":{\"enabled\":true,\"hoverNearest\":true,\"degree\":1,\"algorithm\":\"all\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":false,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"}},\"evals\":[],\"jsHooks\":[]}   {\"x\":{\"nodes\":{\"id\":[1,2,3,4,5,6,7,8,9,10],\"title\":[1,2,3,4,5,6,7,8,9,10],\"x\":[1,0.8090169943749475,0.3090169943749475,-0.3090169943749473,-0.8090169943749473,-1,-0.8090169943749476,-0.3090169943749476,0.3090169943749472,0.8090169943749475],\"y\":[0,0.6180339887498949,1,1,0.6180339887498951,2.220446049250313e-16,-0.6180339887498947,-0.9999999999999999,-1,-0.6180339887498951],\"label\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"]},\"edges\":{\"from\":[3,3,3,4,4,5,5,5,6],\"to\":[4,8,10,7,9,7,8,10,10]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":false},\"physics\":{\"stabilization\":false},\"interaction\":{\"hover\":true,\"zoomSpeed\":1}},\"groups\":null,\"width\":\"100%\",\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"igraphlayout\":{\"type\":\"square\"},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\",\"highlight\":{\"enabled\":true,\"hoverNearest\":true,\"degree\":1,\"algorithm\":\"all\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":false,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://bips-hb.github.io/CVN/reference/matrix_A_inner_ADMM.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine matrix \\(A\\) for inner-ADMM for the \\(Z\\)-update step — matrix_A_inner_ADMM","title":"Determine matrix \\(A\\) for inner-ADMM for the \\(Z\\)-update step — matrix_A_inner_ADMM","text":"\\(Z\\)-update step requires us solve special Generalized LASSO problem form $$   \\hat{\\beta} = \\text{argmin } \\frac{1}{2} || y - \\beta ||_2^2 + ||D\\beta||_1 $$ \\(\\beta\\) \\(y\\) \\(m\\)-dimensional vectors \\(D\\) \\((c \\times m)\\)-matrix \\(c = (m^2 + m) / 2\\). solve optimization problem using adaption ADMM algorithm presented Zhu (2017). algorithm requires choice matrix \\(\\) \\(- D'D\\) positive semidefinite. order optimize ADMM, choose matrix \\(\\) diagonal fixed value \\(\\). function determines smallest value \\(\\) \\(- D'D\\) indeed positive semidefinite. determining largest eigenvalue","code":""},{"path":"https://bips-hb.github.io/CVN/reference/matrix_A_inner_ADMM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine matrix \\(A\\) for inner-ADMM for the \\(Z\\)-update step — matrix_A_inner_ADMM","text":"","code":"matrix_A_inner_ADMM(W, eta1, eta2)"},{"path":"https://bips-hb.github.io/CVN/reference/matrix_A_inner_ADMM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine matrix \\(A\\) for inner-ADMM for the \\(Z\\)-update step — matrix_A_inner_ADMM","text":"W Weight matrix \\(W\\) eta1, eta2 values \\(\\eta_1 = \\lambda_1 / \\rho\\) \\(\\eta_2 = \\lambda_2 / \\rho\\)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/matrix_A_inner_ADMM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine matrix \\(A\\) for inner-ADMM for the \\(Z\\)-update step — matrix_A_inner_ADMM","text":"Value \\(\\)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/matrix_A_inner_ADMM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Determine matrix \\(A\\) for inner-ADMM for the \\(Z\\)-update step — matrix_A_inner_ADMM","text":"Zhu, Y. (2017). Augmented ADMM Algorithm Application Generalized Lasso Problem. Journal Computational Graphical Statistics, 26(1), 195–204.doi:10.1080/10618600.2015.1114491","code":""},{"path":"https://bips-hb.github.io/CVN/reference/matrix_A_inner_ADMM.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Determine matrix \\(A\\) for inner-ADMM for the \\(Z\\)-update step — matrix_A_inner_ADMM","text":"Louis Dijkstra","code":""},{"path":"https://bips-hb.github.io/CVN/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://bips-hb.github.io/CVN/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/plot.cvn.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Function for CVN Object Class — plot.cvn","title":"Plot Function for CVN Object Class — plot.cvn","text":"Custom plot method CVN objects.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/plot.cvn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Function for CVN Object Class — plot.cvn","text":"","code":"# S3 method for class 'cvn' plot(x, ...)"},{"path":"https://bips-hb.github.io/CVN/reference/plot.cvn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Function for CVN Object Class — plot.cvn","text":"x cvn object ... Additional arguments pass visnetwork_cvn","code":""},{"path":[]},{"path":"https://bips-hb.github.io/CVN/reference/plot.cvn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Function for CVN Object Class — plot.cvn","text":"","code":"path <- system.file(\"cvnfit.RData\", package = \"CVN\") load(path) fit <- plot(fit)  #> Creating visNetwork plots for the CVN... #>  #> Number of graphs:                  9 #> Number of different lambda values: 1 #> Creating nodes... #> Determining the 'core graphs'... #> Create the subset of edges in the core graphs... #>  #>  #> Create plots given the determined edges... #>  fit$plots[[1]][[4]]  {\"x\":{\"nodes\":{\"id\":[1,2,3,4,5,6,7,8,9,10],\"title\":[1,2,3,4,5,6,7,8,9,10],\"x\":[1,0.8090169943749475,0.3090169943749475,-0.3090169943749473,-0.8090169943749473,-1,-0.8090169943749476,-0.3090169943749476,0.3090169943749472,0.8090169943749475],\"y\":[0,0.6180339887498949,1,1,0.6180339887498951,2.220446049250313e-16,-0.6180339887498947,-0.9999999999999999,-1,-0.6180339887498951],\"label\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"]},\"edges\":{\"from\":[1,1,3,3,4,4,4,5,6],\"to\":[5,7,5,10,7,9,10,7,7],\"width\":[3,1,1,1,1,1,1,1,1],\"color\":[\"red\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":false},\"physics\":{\"stabilization\":false},\"interaction\":{\"hover\":true,\"zoomSpeed\":1}},\"groups\":null,\"width\":\"100%\",\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"igraphlayout\":{\"type\":\"square\"},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\",\"highlight\":{\"enabled\":true,\"hoverNearest\":true,\"degree\":1,\"algorithm\":\"all\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":false,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://bips-hb.github.io/CVN/reference/plot_hamming_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Heat Map of the Distances between Graphs — plot_hamming_distances","title":"Heat Map of the Distances between Graphs — plot_hamming_distances","text":"Returns heat map distance matrix particular CVN","code":""},{"path":"https://bips-hb.github.io/CVN/reference/plot_hamming_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heat Map of the Distances between Graphs — plot_hamming_distances","text":"","code":"plot_hamming_distances(   distance_matrix,   absolute = TRUE,   limits = c(NA, NA),   title = \"\",   legend_label = \"Hamming Distance\",   add_counts_to_cells = TRUE,   add_ticks_labels = TRUE,   t = -6,   r = -8 )"},{"path":"https://bips-hb.github.io/CVN/reference/plot_hamming_distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heat Map of the Distances between Graphs — plot_hamming_distances","text":"distance_matrix Symmetric matrix distances absolute FALSE, rescaled [0,1] limits limits values Hamming distance title Title plot (Default none) legend_label Title legend (Default: \"Hamming Distance\") add_counts_to_cells TRUE, counts matrix added plot (Default: TRUE) add_ticks_labels TRUE, number corresponding graph add plot (Default: TRUE) t Distance tick labels x-axis (Default: -6) r Distance tick labels y-axis (Default: -8)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/plot_hamming_distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heat Map of the Distances between Graphs — plot_hamming_distances","text":"heatmap plot","code":""},{"path":"https://bips-hb.github.io/CVN/reference/plot_hamming_distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heat Map of the Distances between Graphs — plot_hamming_distances","text":"","code":"path <- system.file(\"cvnfit.RData\", package = \"CVN\") load(path) hd <- hamming_distance(fit, verbose = FALSE)  plot_hamming_distances(hd$distance[[1]])"},{"path":"https://bips-hb.github.io/CVN/reference/plot_hamming_distances_cvn.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmaps for a CVN — plot_hamming_distances_cvn","title":"Heatmaps for a CVN — plot_hamming_distances_cvn","text":"Creates heatmaps CVN, heatmap pair \\((\\lambda_1, \\lambda_2)\\)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/plot_hamming_distances_cvn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmaps for a CVN — plot_hamming_distances_cvn","text":"","code":"plot_hamming_distances_cvn(   cvn,   absolute = TRUE,   same_range = TRUE,   titles = rep(\"\", cvn$n_lambda_values),   legend_label = \"Hamming Distance\",   add_counts_to_cells = TRUE,   add_ticks_labels = TRUE,   t = -6,   r = -8,   verbose = TRUE )"},{"path":"https://bips-hb.github.io/CVN/reference/plot_hamming_distances_cvn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmaps for a CVN — plot_hamming_distances_cvn","text":"cvn cvn object absolute FALSE, rescaled [0,1] same_range TRUE, heatmaps range values Hamming distance shown (Default: TRUE) titles Title plots (Default none) legend_label Title legend (Default: \"Hamming Distance\") add_counts_to_cells TRUE, counts matrix added plot (Default: TRUE) add_ticks_labels TRUE, number corresponding graph add plot (Default: TRUE) t Distance tick labels x-axis (Default: -6) r Distance tick labels y-axis (Default: -8) verbose TRUE, shows progress bar (Default: TRUE)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/plot_hamming_distances_cvn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmaps for a CVN — plot_hamming_distances_cvn","text":"List plots","code":""},{"path":"https://bips-hb.github.io/CVN/reference/plot_hamming_distances_cvn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmaps for a CVN — plot_hamming_distances_cvn","text":"","code":"path <- system.file(\"cvnfit.RData\", package = \"CVN\") load(path)  plot_hamming_distances_cvn(fit) #> Determining Hamming distances between the graphs... #>  #> $m #> [1] 9 #>  #> $p #> [1] 10 #>  #> $W #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #>  [1,]    0    1    0    1    0    0    0    0    0 #>  [2,]    1    0    1    0    1    0    0    0    0 #>  [3,]    0    1    0    0    0    1    0    0    0 #>  [4,]    1    0    0    0    1    0    1    0    0 #>  [5,]    0    1    0    1    0    1    0    1    0 #>  [6,]    0    0    1    0    1    0    0    0    1 #>  [7,]    0    0    0    1    0    0    0    1    0 #>  [8,]    0    0    0    0    1    0    1    0    1 #>  [9,]    0    0    0    0    0    1    0    1    0 #>  #> $distances #> $distances[[1]] #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #>  [1,]    0   11   16   15   14   14   17   16   13 #>  [2,]   11    0    7   10    5    9   12   11   12 #>  [3,]   16    7    0   13   10    8   17   12   11 #>  [4,]   15   10   13    0    7    9    4    7   10 #>  [5,]   14    5   10    7    0    8   11    8   11 #>  [6,]   14    9    8    9    8    0   13   10    9 #>  [7,]   17   12   17    4   11   13    0    9   12 #>  [8,]   16   11   12    7    8   10    9    0    5 #>  [9,]   13   12   11   10   11    9   12    5    0 #> attr(,\"class\") #> [1] \"cvn:distancematrix\" #>  #>  #> $results #>   id lambda1 lambda2      gamma1       gamma2 converged       value #> 6  6       2     1.5 0.004938272 0.0009259259      TRUE 0.009319307 #>   n_iterations      aic      bic     ebic edges_median edges_iqr #> 6           26 4404.656 4651.844 5407.092            8         1 #>  #> $plots #> $plots[[1]]  #>  #>"},{"path":"https://bips-hb.github.io/CVN/reference/plot_information_criterion.html","id":null,"dir":"Reference","previous_headings":"","what":"Heat Map of an Information Criterion (AIC or BIC) — plot_information_criterion","title":"Heat Map of an Information Criterion (AIC or BIC) — plot_information_criterion","text":"Returns heat map AIC BIC fitted CVN","code":""},{"path":"https://bips-hb.github.io/CVN/reference/plot_information_criterion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heat Map of an Information Criterion (AIC or BIC) — plot_information_criterion","text":"","code":"plot_information_criterion(   cvn,   criterion = c(\"bic\", \"aic\", \"ebic\"),   use_gammas = TRUE,   show_minimum = TRUE,   title = \"\",   xlabel = NULL,   ylabel = NULL,   legend_label = NULL,   limits = c(NA, NA) )"},{"path":"https://bips-hb.github.io/CVN/reference/plot_information_criterion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heat Map of an Information Criterion (AIC or BIC) — plot_information_criterion","text":"cvn Fitted CVN, see CVN criterion information criterion, must either 'aic' 'bic'. Default: 'bic' use_gammas TRUE, plots \\(\\gamma\\)-values. Otherwise, \\(\\lambda\\)-values used show_minimum TRUE, orange dot put point minimum value information criterion . FALSE, dot added. Default: TRUE. title Title plot (Default none) xlabel Label \\(x\\)-axis. Default depends use_gammas. use_gammas = TRUE, label 'gamma1'. Otherwise, 'lambda1' ylabel Label \\(x\\)-axis. Default depends use_gammas. use_gammas = TRUE, label 'gamma1'. Otherwise, 'lambda1' legend_label Title legend. Default depends criterion. 'aic', label 'AIC'. Otherwise, 'BIC'. limits limits values Hamming distance","code":""},{"path":"https://bips-hb.github.io/CVN/reference/plot_information_criterion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heat Map of an Information Criterion (AIC or BIC) — plot_information_criterion","text":"heatmap plot","code":""},{"path":"https://bips-hb.github.io/CVN/reference/plot_information_criterion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heat Map of an Information Criterion (AIC or BIC) — plot_information_criterion","text":"","code":"data(grid) m <- 9  W <- create_weight_matrix(type=\"grid\", 3, 3) cvn <- CVN(grid, W,             lambda1 = 1:2, lambda2 = .5, n_cores = 1) #> Estimating a CVN with 9 graphs... #>  #> Number of cores: 1 #> Uses a warmstart... #>  #> ------------------------- #> iteration 1  |  2.180956 #> iteration 2  |  0.115992 #> iteration 3  |  0.085701 #> iteration 4  |  0.032432 #> iteration 5  |  0.027966 #> iteration 6  |  0.014144 #> iteration 7  |  0.011243 #> iteration 8  |  0.008368 #> iteration 9  |  0.006504 #> iteration 10  |  0.005949 #> ------------------------- #> iteration 11  |  0.004572 #> iteration 12  |  0.003524 #> iteration 13  |  0.003235 #> iteration 14  |  0.002473 #> iteration 15  |  0.002350 #> iteration 16  |  0.002180 #> iteration 17  |  0.001924 #> iteration 18  |  0.001890 #> iteration 19  |  0.001638 #> iteration 20  |  0.001591 #> ------------------------- #> iteration 21  |  0.001375 #> iteration 22  |  0.001291 #> iteration 23  |  0.000999 #> iteration 24  |  0.000962 #> iteration 25  |  0.000888 #> iteration 26  |  0.000848 #> iteration 27  |  0.000777 #> iteration 28  |  0.000637 #> iteration 29  |  0.000600 #> iteration 30  |  0.000599 #> ------------------------- #> iteration 31  |  0.000542 #> iteration 32  |  0.000550 #> iteration 33  |  0.000513 #> iteration 34  |  0.000451 #> iteration 35  |  0.000430 #> iteration 36  |  0.000411 #> iteration 37  |  0.000398 #> iteration 38  |  0.000387 #> iteration 39  |  0.000367 #> iteration 40  |  0.000386 #> ------------------------- #> iteration 41  |  0.000354 #> iteration 42  |  0.000351 #> iteration 43  |  0.000360 #> iteration 44  |  0.000361 #> iteration 45  |  0.000329 #> iteration 46  |  0.000318 #> iteration 47  |  0.000308 #> iteration 48  |  0.000294 #> iteration 49  |  0.000306 #> iteration 50  |  0.000275 #> ------------------------- #> iteration 51  |  0.000265 #> iteration 52  |  0.000241 #> iteration 53  |  0.000233 #> iteration 54  |  0.000230 #> iteration 55  |  0.000216 #> iteration 56  |  0.000234 #> iteration 57  |  0.000191 #> iteration 58  |  0.000187 #> iteration 59  |  0.000171 #> iteration 60  |  0.000165 #> ------------------------- #> iteration 61  |  0.000168 #> iteration 62  |  0.000186 #> iteration 63  |  0.000168 #> iteration 64  |  0.000157 #> iteration 65  |  0.000152 #> iteration 66  |  0.000147 #> iteration 67  |  0.000146 #> iteration 68  |  0.000153 #> iteration 69  |  0.000139 #> iteration 70  |  0.000135 #> ------------------------- #> iteration 71  |  0.000131 #> iteration 72  |  0.000127 #> iteration 73  |  0.000124 #> iteration 74  |  0.000120 #> iteration 75  |  0.000117 #> iteration 76  |  0.000114 #> iteration 77  |  0.000121 #> iteration 78  |  0.000124 #> iteration 79  |  0.000113 #> iteration 80  |  0.000106 #> ------------------------- #> iteration 81  |  0.000120 #> iteration 82  |  0.000114 #> iteration 83  |  0.000103 #> iteration 84  |  0.000105 #> iteration 85  |  0.000102 #> iteration 86  |  0.000097 #> ------------------------- #> iteration 1  |  1.771692 #> iteration 2  |  0.153946 #> iteration 3  |  0.092411 #> iteration 4  |  0.072031 #> iteration 5  |  0.054334 #> iteration 6  |  0.026809 #> iteration 7  |  0.020415 #> iteration 8  |  0.016228 #> iteration 9  |  0.012340 #> iteration 10  |  0.009765 #> ------------------------- #> iteration 11  |  0.008402 #> iteration 12  |  0.006927 #> iteration 13  |  0.006604 #> iteration 14  |  0.005755 #> iteration 15  |  0.004868 #> iteration 16  |  0.004128 #> iteration 17  |  0.003626 #> iteration 18  |  0.003184 #> iteration 19  |  0.002952 #> iteration 20  |  0.002483 #> ------------------------- #> iteration 21  |  0.002288 #> iteration 22  |  0.002080 #> iteration 23  |  0.001743 #> iteration 24  |  0.001602 #> iteration 25  |  0.001633 #> iteration 26  |  0.001355 #> iteration 27  |  0.001302 #> iteration 28  |  0.001151 #> iteration 29  |  0.001054 #> iteration 30  |  0.001003 #> ------------------------- #> iteration 31  |  0.000923 #> iteration 32  |  0.000909 #> iteration 33  |  0.000864 #> iteration 34  |  0.000876 #> iteration 35  |  0.000768 #> iteration 36  |  0.000779 #> iteration 37  |  0.000663 #> iteration 38  |  0.000621 #> iteration 39  |  0.000607 #> iteration 40  |  0.000589 #> ------------------------- #> iteration 41  |  0.000553 #> iteration 42  |  0.000547 #> iteration 43  |  0.000486 #> iteration 44  |  0.000442 #> iteration 45  |  0.000406 #> iteration 46  |  0.000362 #> iteration 47  |  0.000356 #> iteration 48  |  0.000340 #> iteration 49  |  0.000332 #> iteration 50  |  0.000369 #> ------------------------- #> iteration 51  |  0.000321 #> iteration 52  |  0.000314 #> iteration 53  |  0.000301 #> iteration 54  |  0.000290 #> iteration 55  |  0.000282 #> iteration 56  |  0.000274 #> iteration 57  |  0.000255 #> iteration 58  |  0.000257 #> iteration 59  |  0.000240 #> iteration 60  |  0.000228 #> ------------------------- #> iteration 61  |  0.000224 #> iteration 62  |  0.000220 #> iteration 63  |  0.000214 #> iteration 64  |  0.000206 #> iteration 65  |  0.000189 #> iteration 66  |  0.000191 #> iteration 67  |  0.000201 #> iteration 68  |  0.000180 #> iteration 69  |  0.000175 #> iteration 70  |  0.000175 #> ------------------------- #> iteration 71  |  0.000168 #> iteration 72  |  0.000175 #> iteration 73  |  0.000149 #> iteration 74  |  0.000143 #> iteration 75  |  0.000139 #> iteration 76  |  0.000136 #> iteration 77  |  0.000135 #> iteration 78  |  0.000128 #> iteration 79  |  0.000125 #> iteration 80  |  0.000122 #> ------------------------- #> iteration 81  |  0.000119 #> iteration 82  |  0.000116 #> iteration 83  |  0.000113 #> iteration 84  |  0.000111 #> iteration 85  |  0.000113 #> iteration 86  |  0.000104 #> iteration 87  |  0.000110 #> iteration 88  |  0.000096 cvn$results           #>   id lambda1 lambda2      gamma1      gamma2 converged        value #> 1  1       1     0.5 0.002469136 0.000308642      TRUE 9.684448e-05 #> 2  2       2     0.5 0.004938272 0.000308642      TRUE 9.643472e-05 #>   n_iterations      aic      bic     ebic edges_median edges_iqr #> 1           87 14493.34 16483.69 20002.04           42         1 #> 2           89 13967.70 15911.15 19346.61           42         2  # The smaller the IC value, the better the fit.  plot_information_criterion(cvn, criterion = \"aic\")  plot_information_criterion(cvn, criterion = \"bic\")  plot_information_criterion(cvn, criterion = \"ebic\")"},{"path":"https://bips-hb.github.io/CVN/reference/plot_weight_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot weight matrix as a grid — plot_weight_matrix","title":"Plot weight matrix as a grid — plot_weight_matrix","text":"function requires igraph package installed.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/plot_weight_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot weight matrix as a grid — plot_weight_matrix","text":"","code":"plot_weight_matrix(W, k, l)"},{"path":"https://bips-hb.github.io/CVN/reference/plot_weight_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot weight matrix as a grid — plot_weight_matrix","text":"W weight matrix equals adjacency matrix k Number categories first external covariate l Number categories second external covariate","code":""},{"path":"https://bips-hb.github.io/CVN/reference/plot_weight_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot weight matrix as a grid — plot_weight_matrix","text":"igraph object","code":""},{"path":[]},{"path":"https://bips-hb.github.io/CVN/reference/plot_weight_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot weight matrix as a grid — plot_weight_matrix","text":"","code":"# Requires to have the igraph package to be installed W <- create_weight_matrix(type = \"full\", k = 2, l = 3) plot_weight_matrix(W, k=2, l=3)"},{"path":"https://bips-hb.github.io/CVN/reference/print.cvn.html","id":null,"dir":"Reference","previous_headings":"","what":"Print CVN — print.cvn","title":"Print CVN — print.cvn","text":"Print contents CVN object","code":""},{"path":"https://bips-hb.github.io/CVN/reference/print.cvn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print CVN — print.cvn","text":"","code":"# S3 method for class 'cvn' print(x, ...)"},{"path":"https://bips-hb.github.io/CVN/reference/print.cvn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print CVN — print.cvn","text":"x Object classs 'CVN' ... Additional arguments pass","code":""},{"path":[]},{"path":"https://bips-hb.github.io/CVN/reference/print.cvn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print CVN — print.cvn","text":"","code":"path <- system.file(\"cvnfit.RData\", package = \"CVN\") load(path)  print(fit) #> Covariate-varying Network (CVN) #>  #> ✓ all converged #>  #> Number of graphs (m)    : 9 #> Number of variables (p) : 10 #> Number of lambda pairs  : 1 #>  #> Weight matrix (W): #> 9 x 9 sparse Matrix of class \"dsCMatrix\" #>                         #>  [1,] . 1 . 1 . . . . . #>  [2,] 1 . 1 . 1 . . . . #>  [3,] . 1 . . . 1 . . . #>  [4,] 1 . . . 1 . 1 . . #>  [5,] . 1 . 1 . 1 . 1 . #>  [6,] . . 1 . 1 . . . 1 #>  [7,] . . . 1 . . . 1 . #>  [8,] . . . . 1 . 1 . 1 #>  [9,] . . . . . 1 . 1 . #>  #>   id lambda1 lambda2      gamma1       gamma2 converged       value #> 6  6       2     1.5 0.004938272 0.0009259259      TRUE 0.009319307 #>   n_iterations      aic      bic     ebic edges_median edges_iqr #> 6           26 4404.656 4651.844 5407.092            8         1"},{"path":"https://bips-hb.github.io/CVN/reference/relative_difference_precision_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"The Relative Difference between two Precision Matrices — relative_difference_precision_matrices","title":"The Relative Difference between two Precision Matrices — relative_difference_precision_matrices","text":"Returns relative \\(L1\\) difference precision matrix \\(\\Theta(k+1)\\) (parameter Theta_new) \\(\\Theta(k)\\) (parameter Theta_old).","code":""},{"path":"https://bips-hb.github.io/CVN/reference/relative_difference_precision_matrices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Relative Difference between two Precision Matrices — relative_difference_precision_matrices","text":"","code":"relative_difference_precision_matrices(Theta_new, Theta_old)"},{"path":"https://bips-hb.github.io/CVN/reference/relative_difference_precision_matrices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Relative Difference between two Precision Matrices — relative_difference_precision_matrices","text":"Theta_new list matrices updated values \\(\\Theta\\) Theta_old list matrices old values \\(\\Theta\\)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/relative_difference_precision_matrices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Relative Difference between two Precision Matrices — relative_difference_precision_matrices","text":"relative difference \\(\\Theta(k+1)\\) \\(\\Theta(k)\\)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/relative_difference_precision_matrices.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The Relative Difference between two Precision Matrices — relative_difference_precision_matrices","text":"used checking whether stopping condition met.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/set_attributes_to_edges_visnetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Attributes to Subset of Edges for visNetwork — set_attributes_to_edges_visnetwork","title":"Add Attributes to Subset of Edges for visNetwork — set_attributes_to_edges_visnetwork","text":"subset edges can assign different thickness color.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/set_attributes_to_edges_visnetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Attributes to Subset of Edges for visNetwork — set_attributes_to_edges_visnetwork","text":"","code":"set_attributes_to_edges_visnetwork(   edges,   subset_edges,   width = c(NA, NA),   color = c(NULL, NULL) )"},{"path":"https://bips-hb.github.io/CVN/reference/set_attributes_to_edges_visnetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Attributes to Subset of Edges for visNetwork — set_attributes_to_edges_visnetwork","text":"edges data.frame create create_edges_visnetwork subset_edges list elements . vectors length denoting different edges width Vector two values. first assigned edges subset given subset_edges. second value assigned rest. width = c(NA,NA), width assigned color Vector two values. first assigned edges subset given subset_edges. second value assigned rest. color = c(NULL,NULL), color assigned","code":""},{"path":"https://bips-hb.github.io/CVN/reference/set_attributes_to_edges_visnetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Attributes to Subset of Edges for visNetwork — set_attributes_to_edges_visnetwork","text":"data frame can used visNetwork package","code":""},{"path":"https://bips-hb.github.io/CVN/reference/set_attributes_to_edges_visnetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Attributes to Subset of Edges for visNetwork — set_attributes_to_edges_visnetwork","text":"","code":"nodes <- create_nodes_visnetwork(n_nodes = 5, labels = LETTERS[1:5])  adj_matrix <- matrix(c(0, 1, 0, 1, 0,                        1, 0, 1, 0, 0,                        0, 1, 0, 0, 0,                        1, 0, 0, 0, 1,                        0, 0, 0, 1, 0), ncol = 5)  edges <- create_edges_visnetwork(adj_matrix)  shared_edges <- data.frame(from = c(1,2), to = c(4, 3))  edges <- set_attributes_to_edges_visnetwork(edges,                                             subset_edges = shared_edges,                                             width = c(3, .5),                                             color = c(\"red\", \"blue\"))  visnetwork(nodes, edges)  {\"x\":{\"nodes\":{\"id\":[1,2,3,4,5],\"title\":[\"A\",\"B\",\"C\",\"D\",\"E\"],\"x\":[1,0.2360679774997898,-0.9999999999999998,-1,0.2360679774997898],\"y\":[0,1,0.6180339887498951,-0.6180339887498947,-1],\"label\":[\"1\",\"2\",\"3\",\"4\",\"5\"]},\"edges\":{\"from\":[1,1,2,4],\"to\":[2,4,3,5],\"width\":[0.5,3,3,0.5],\"color\":[\"blue\",\"red\",\"red\",\"blue\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":false},\"physics\":{\"stabilization\":false},\"interaction\":{\"hover\":true,\"zoomSpeed\":1}},\"groups\":null,\"width\":\"100%\",\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"igraphlayout\":{\"type\":\"square\"},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\",\"highlight\":{\"enabled\":true,\"hoverNearest\":true,\"degree\":1,\"algorithm\":\"all\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":false,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://bips-hb.github.io/CVN/reference/strip_cvn.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip CVN — strip_cvn","title":"Strip CVN — strip_cvn","text":"Function removes items make CVN object memory sufficient. especially important graphs rather larger","code":""},{"path":"https://bips-hb.github.io/CVN/reference/strip_cvn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip CVN — strip_cvn","text":"","code":"strip_cvn(cvn)"},{"path":"https://bips-hb.github.io/CVN/reference/strip_cvn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strip CVN — strip_cvn","text":"cvn Object classs 'CVN'","code":""},{"path":"https://bips-hb.github.io/CVN/reference/strip_cvn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strip CVN — strip_cvn","text":"Reduced CVN Theta, data Sigma         removed","code":""},{"path":"https://bips-hb.github.io/CVN/reference/updateZRcpp.html","id":null,"dir":"Reference","previous_headings":"","what":"The \\(Z\\)-update Step — updateZRcpp","title":"The \\(Z\\)-update Step — updateZRcpp","text":"C implementation \\(Z\\)-update step. solve generalized LASSO problem repeatedly individual edges","code":""},{"path":"https://bips-hb.github.io/CVN/reference/updateZRcpp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The \\(Z\\)-update Step — updateZRcpp","text":"","code":"updateZRcpp(m, p, Theta, Y, W, eta1, eta2, a, rho, max_iter, eps, truncate)"},{"path":"https://bips-hb.github.io/CVN/reference/updateZRcpp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The \\(Z\\)-update Step — updateZRcpp","text":"m number graphs p number variables Theta list matrices \\(\\Theta\\)-matrices Y list matrices \\(Y\\)-matrices W weight matrix \\(W\\) dimensions \\(m x m\\) eta1 Equals \\(\\lambda_1 / rho\\) eta2 Equals \\(\\lambda_2 / rho\\) Value added diagonal \\(-D'D\\) matrix positive definite, see matrix_A_inner_ADMM rho ADMM's parameter max_iter Maximum number iterations eps Stopping criterion. differences smaller \\(\\epsilon\\), algorithm halted truncate Values truncate set 0","code":""},{"path":"https://bips-hb.github.io/CVN/reference/updateZRcpp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The \\(Z\\)-update Step — updateZRcpp","text":"estimated vector \\(\\hat{\\beta}\\)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/updateZRcpp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The \\(Z\\)-update Step — updateZRcpp","text":"Louis Dijkstra","code":""},{"path":"https://bips-hb.github.io/CVN/reference/visnetwork.html","id":null,"dir":"Reference","previous_headings":"","what":"A visNetwork plot — visnetwork","title":"A visNetwork plot — visnetwork","text":"Creates visNetwork plot given list nodes edges. nodes data frame can created create_nodes_visnetwork; edges create_edges_visnetwork. order highlight edges, can use set_attributes_to_edges_visnetwork.","code":""},{"path":"https://bips-hb.github.io/CVN/reference/visnetwork.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A visNetwork plot — visnetwork","text":"","code":"visnetwork(   nodes,   edges,   node_titles = nodes$id,   title = \"\",   igraph_layout = \"layout_in_circle\" )"},{"path":"https://bips-hb.github.io/CVN/reference/visnetwork.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A visNetwork plot — visnetwork","text":"nodes data frame rows equal number nodes columns \"id\" \"title\". Can created create_nodes_visnetwork. edges data frame columns \"\" \". row represents edge two nodes (integer) node_titles Vector title nodes (Default: 1:p) title list n_lambda_values vectors. vector lenght m. Regulates titles graphs (Default: title) igraph_layout igraph layout (default: layout_in_circle)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/visnetwork.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A visNetwork plot — visnetwork","text":"visNetwork plot","code":""},{"path":[]},{"path":"https://bips-hb.github.io/CVN/reference/visnetwork.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A visNetwork plot — visnetwork","text":"","code":"nodes <- create_nodes_visnetwork(n_nodes = 5, labels = LETTERS[1:5])  adj_matrix <- matrix(c(0, 1, 0, 1, 0,                        1, 0, 1, 0, 0,                        0, 1, 0, 0, 0,                        1, 0, 0, 0, 1,                        0, 0, 0, 1, 0), ncol = 5)  edges <- create_edges_visnetwork(adj_matrix)  shared_edges <- data.frame(from = c(1,2), to = c(4, 3))  edges <- set_attributes_to_edges_visnetwork(edges,                                             subset_edges = shared_edges,                                             width = c(3, .5),                                             color = c(\"red\", \"blue\"))  visnetwork(nodes, edges)  {\"x\":{\"nodes\":{\"id\":[1,2,3,4,5],\"title\":[\"A\",\"B\",\"C\",\"D\",\"E\"],\"x\":[1,0.2360679774997898,-0.9999999999999998,-1,0.2360679774997898],\"y\":[0,1,0.6180339887498951,-0.6180339887498947,-1],\"label\":[\"1\",\"2\",\"3\",\"4\",\"5\"]},\"edges\":{\"from\":[1,1,2,4],\"to\":[2,4,3,5],\"width\":[0.5,3,3,0.5],\"color\":[\"blue\",\"red\",\"red\",\"blue\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":false},\"physics\":{\"stabilization\":false},\"interaction\":{\"hover\":true,\"zoomSpeed\":1}},\"groups\":null,\"width\":\"100%\",\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"igraphlayout\":{\"type\":\"square\"},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\",\"highlight\":{\"enabled\":true,\"hoverNearest\":true,\"degree\":1,\"algorithm\":\"all\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":false,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"}},\"evals\":[],\"jsHooks\":[]}"},{"path":"https://bips-hb.github.io/CVN/reference/visnetwork_cvn.html","id":null,"dir":"Reference","previous_headings":"","what":"All visNetwork plots for a CVN object — visnetwork_cvn","title":"All visNetwork plots for a CVN object — visnetwork_cvn","text":"Creates visNetwork plots, see visnetwork, graphs cvn object","code":""},{"path":"https://bips-hb.github.io/CVN/reference/visnetwork_cvn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All visNetwork plots for a CVN object — visnetwork_cvn","text":"","code":"visnetwork_cvn(   cvn,   node_titles = 1:cvn$p,   titles = lapply(1:cvn$n_lambda_values, function(i) sapply(1:cvn$m, function(j) \"\")),   show_core_graph = TRUE,   width = c(3, 1),   color = c(\"red\", \"blue\"),   igraph_layout = \"layout_in_circle\",   verbose = TRUE )"},{"path":"https://bips-hb.github.io/CVN/reference/visnetwork_cvn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"All visNetwork plots for a CVN object — visnetwork_cvn","text":"cvn cvn object, see CVN node_titles Vector title nodes (Default: 1:p) titles list n_lambda_values vectors. vector lenght m. Regulates titles graphs (Default: title) show_core_graph Shall core graph visualized (Default = TRUE) width Edge width core graph color String vector two colors. first color marks edges core graph (Default: c(\"red\", \"blue\")) igraph_layout igraph layout (default: layout_in_circle) verbose Verbose (Default: TRUE)","code":""},{"path":"https://bips-hb.github.io/CVN/reference/visnetwork_cvn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All visNetwork plots for a CVN object — visnetwork_cvn","text":"cvn input extended list element 'plots'","code":""},{"path":[]},{"path":"https://bips-hb.github.io/CVN/reference/visnetwork_cvn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"All visNetwork plots for a CVN object — visnetwork_cvn","text":"","code":"path <- system.file(\"cvnfit.RData\", package = \"CVN\") load(path) fit_plot <- visnetwork_cvn(fit) #> Creating visNetwork plots for the CVN... #>  #> Number of graphs:                  9 #> Number of different lambda values: 1 #> Creating nodes... #> Determining the 'core graphs'... #> Create the subset of edges in the core graphs... #>  #>  #> Create plots given the determined edges... #>  fit_plot$plots[[1]][[1]]  {\"x\":{\"nodes\":{\"id\":[1,2,3,4,5,6,7,8,9,10],\"title\":[1,2,3,4,5,6,7,8,9,10],\"x\":[1,0.8090169943749475,0.3090169943749475,-0.3090169943749473,-0.8090169943749473,-1,-0.8090169943749476,-0.3090169943749476,0.3090169943749472,0.8090169943749475],\"y\":[0,0.6180339887498949,1,1,0.6180339887498951,2.220446049250313e-16,-0.6180339887498947,-0.9999999999999999,-1,-0.6180339887498951],\"label\":[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\"]},\"edges\":{\"from\":[1,1,2,2,2,3,3,4,4,5,5,7,8,9],\"to\":[5,7,3,8,9,4,6,7,9,6,9,9,9,10],\"width\":[3,1,1,1,1,1,1,1,1,1,1,1,1,1],\"color\":[\"red\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\",\"blue\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":false},\"physics\":{\"stabilization\":false},\"interaction\":{\"hover\":true,\"zoomSpeed\":1}},\"groups\":null,\"width\":\"100%\",\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"igraphlayout\":{\"type\":\"square\"},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\",\"highlight\":{\"enabled\":true,\"hoverNearest\":true,\"degree\":1,\"algorithm\":\"all\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":false,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"}},\"evals\":[],\"jsHooks\":[]}"}]
